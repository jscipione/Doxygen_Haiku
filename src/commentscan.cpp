
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer commentScanYY_create_buffer
#define yy_delete_buffer commentScanYY_delete_buffer
#define yy_flex_debug commentScanYY_flex_debug
#define yy_init_buffer commentScanYY_init_buffer
#define yy_flush_buffer commentScanYY_flush_buffer
#define yy_load_buffer_state commentScanYY_load_buffer_state
#define yy_switch_to_buffer commentScanYY_switch_to_buffer
#define yyin commentScanYYin
#define yyleng commentScanYYleng
#define yylex commentScanYYlex
#define yylineno commentScanYYlineno
#define yyout commentScanYYout
#define yyrestart commentScanYYrestart
#define yytext commentScanYYtext
#define yywrap commentScanYYwrap
#define yyalloc commentScanYYalloc
#define yyrealloc commentScanYYrealloc
#define yyfree commentScanYYfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE commentScanYYrestart(commentScanYYin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 262144
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t commentScanYYleng;

extern FILE *commentScanYYin, *commentScanYYout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via commentScanYYrestart()), so that the user can continue scanning by
	 * just pointing commentScanYYin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when commentScanYYtext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t commentScanYYleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow commentScanYYwrap()'s to do buffer switches
 * instead of setting up a fresh commentScanYYin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void commentScanYYrestart (FILE *input_file  );
void commentScanYY_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE commentScanYY_create_buffer (FILE *file,int size  );
void commentScanYY_delete_buffer (YY_BUFFER_STATE b  );
void commentScanYY_flush_buffer (YY_BUFFER_STATE b  );
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void commentScanYYpop_buffer_state (void );

static void commentScanYYensure_buffer_stack (void );
static void commentScanYY_load_buffer_state (void );
static void commentScanYY_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER commentScanYY_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE commentScanYY_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE commentScanYY_scan_bytes (yyconst char *bytes,yy_size_t len  );

void *commentScanYYalloc (yy_size_t  );
void *commentScanYYrealloc (void *,yy_size_t  );
void commentScanYYfree (void *  );

#define yy_new_buffer commentScanYY_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        commentScanYYensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define commentScanYYwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *commentScanYYin = (FILE *) 0, *commentScanYYout = (FILE *) 0;

typedef int yy_state_type;

extern int commentScanYYlineno;

int commentScanYYlineno = 1;

extern char *commentScanYYtext;
#define yytext_ptr commentScanYYtext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up commentScanYYtext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	commentScanYYleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 183
#define YY_END_OF_BUFFER 184
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_acclist[754] =
    {   0,
       66,   66,  110,  110,  123,  123,  133,  133,  177,  177,
      184,  183,   34,  183,   34,  183,   33,  183,   34,  183,
       34,  183,   34,  183,   32,   34,  183,   34,  183,   34,
      183,   23,   34,  183,   34,  183,   34,  183,   25,   34,
      183,   32,   34,  183,   79,  183,   78,  183,   79,  183,
       76,   79,  183,   79,  183,   79,  183,  183,   80,  183,
      100,  183,   99,  183,  100,  183,   97,  100,  183,  100,
      183,   61,  183,   61,  183,   60,  183,   61,  183,   61,
      183,   61,  183,   57,   61,  183,   61,  183,   61,  183,
       65,  183,   64,  183,   65,  183,   62,   65,  183,   65,

      183,   65,  183,   65,  183,   69,  183,   68,  183,   69,
      183,   66,   69,  183,   69,  183,   66,   69,  183,   66,
       69,  183,   69,  183,   61,  183,   60,  183,   61,  183,
       61,  183,   61,  183,   61,  183,   61,  183,   88,  183,
       87,  183,   85,   88,  183,   88,  183,   92,  183,   91,
      183,   92,  183,   92,  183,   96,  183,   95,  183,   96,
      183,   96,  183,   84,  183,   81,  183,   84,  183,   82,
       84,  183,   84,  183,   84,  183,   48,  183,   47,  183,
       48,  183,   45,   48,  183,   48,  183,   52,  183,   52,
      183,   51,  183,   52,  183,   52,  183,   52,  183,   49,

       52,  183,   52,  183,   52,  183,   56,  183,   55,  183,
       56,  183,   53,   56,  183,   56,  183,   72,  183,   70,
      183,  183,   74,  183,   75,  183,  183,  106,  183,  105,
      183,  104,  106,  183,  106,  183,  110,  113,  183,  107,
      183,  110,  113,  183,  113,  183,  113,  183,  115,  183,
      114,  183,  183,  118,  183,  118,  183,  116,  183,  118,
      183,  118,  183,  123,  127,  183,  124,  183,  127,  183,
      127,  183,  127,  183,  127,  183,  127,  183,  103,  183,
      101,  183,  103,  183,  131,  183,  129,  183,  128,  131,
      183,  131,  183,  134,  183,  133,  134,  183,  132,  183,

      134,  183,  141,  142,  183,  140,  183,  142,  183,  142,
      183,  142,  183,  152,  153,  183,  143,  183,  153,  183,
      153,  183,  153,  183,  156,  183,  154,  183,  156,  183,
      160,  183,  158,  183,  157,  160,  183,  160,  183,  163,
      166,  183,  161,  183,  164,  166,  183,  165,  166,  183,
      166,  183,  166,  183,  169,  183,  167,  183,  169,  183,
      172,  183,  171,  183,  172,  183,  170,  172,  183,  172,
      183,  175,  183,  174,  183,  175,  183,  173,  175,  183,
      175,  183,   42,   44,  183,   43,  183,   44,  183,   44,
      183,  121,  183,  120,  183,  119,  121,  183,  121,  183,

       37,   38,  183,   36,  183,   38,  183,   38,  183,  177,
      179,  183,  178,  183,  179,  183,  179,  183,  179,  183,
      182,  183,  181,  183,  180,  182,  183,  182,  183,   31,
        4,   26,   28,   26,   22,   22,   14,   22,   14,   14,
       14,   14,   14,   14,   20,   21,   16,   22,   23,   14,
       14,   14,   14,   14,   14,   14,   14,   25,   24,   76,
       76,   77,   76,   80,   97,   97,   98,   57,   57,   59,
       57,   62,   62,   63,   62,   66,   66,   66,   67,   66,
       85,   86,   89,   90,   94,   93,   94,   82,   82,   83,
       82,   45,   45,   45,   46,   49,   49,   50,   49,   53,

       53,   54,   70,   71,   74,   73,  104,  110,  107,  110,
      112,  112,  109,  114,  117,  123,  126,  125,  102,  128,
      130,  133,  132,  141,  152,  155,  157,  159,  163,  162,
      168,  170,  170,  173,  173,   42,  119,   37,  177,  176,
      180,   22,   30,   26,   30,   30,   30,   26,   30,   30,
       27,    7,    1,    1,    2,   14,   14,   14,   14,   18,
       19,   14,   14,   14,   16,    5,   14,   14,   14,   14,
       14,   14,   14,   76,   76,   57,   62,   62,   66,   66,
       82,   82,   45,   45,   45,   45,   49,   53,  111,   39,
       40,   41,   35,  176,   30,   30,   12,    1,   15,    2,

     8198,   14,16390,   14,   14,   14,   14,   14,   14, 8198,
       14,16390,   14,   14,   14,   14,   14,   76,   62,   66,
       58,   82,   45,   45,   45,   53,  111,  136,  144,   35,
       11,   29, 8198, 8198,   14,   14,   14,   17,   14,   14,
        5, 8198,   14,   14,   14,   76,   62,   66,   82,    3,
       14,   14,   17,   14,   14,   14,   14,   14,   76,   62,
       66,   82,   70,  138,  146,   14,   14,   14,   14,   14,
       14,   14,   76,   62,   66,   82,  137,  135,  145,   14,
       14,   14,   14,   14,   14,   14,   76,   78,   99,   60,
       62,   64,   66,   68,   87,   91,   95,   81,   82,   47,

       51,   55,   72,   75,  105,  108,  115,  116,  122,  124,
      101,  129,  139,  140,  143,  154,  158,  161,  167,  171,
      174,  120,   36,  178,  181,    9,    8,   14,   14,   14,
        5,   14,   14,  147,   10,   14,   14,   14,   14,   14,
       14,  150,   13,   14,   13,   14,  151,  148,   13,   14,
      151,  149,   31
    } ;

static yyconst flex_int16_t yy_accept[1069] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    2,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    4,
        5,    5,    5,    5,    5,    6,    7,    7,    7,    7,
        7,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,   10,   11,   11,
       11,   12,   13,   15,   17,   19,   21,   23,   25,   28,
       30,   32,   35,   37,   39,   42,   45,   47,   49,   51,

       54,   56,   58,   59,   61,   63,   65,   67,   70,   72,
       74,   76,   78,   80,   82,   84,   87,   89,   91,   93,
       95,   97,  100,  102,  104,  106,  108,  110,  112,  115,
      117,  120,  123,  125,  127,  129,  131,  133,  135,  137,
      139,  141,  143,  146,  148,  150,  152,  154,  156,  158,
      160,  162,  164,  166,  168,  170,  173,  175,  177,  179,
      181,  183,  186,  188,  190,  192,  194,  196,  198,  200,
      203,  205,  207,  209,  211,  213,  216,  218,  220,  222,
      223,  225,  227,  228,  230,  232,  235,  237,  240,  242,
      245,  247,  249,  251,  253,  254,  256,  258,  260,  262,

      264,  267,  269,  271,  273,  275,  277,  279,  281,  283,
      285,  287,  289,  292,  294,  296,  299,  301,  303,  306,
      308,  310,  312,  314,  317,  319,  321,  323,  325,  327,
      329,  331,  333,  335,  338,  340,  343,  345,  348,  351,
      353,  355,  357,  359,  361,  363,  365,  367,  370,  372,
      374,  376,  378,  381,  383,  386,  388,  390,  392,  394,
      396,  399,  401,  404,  406,  408,  410,  413,  415,  417,
      419,  421,  423,  425,  428,  430,  430,  430,  430,  430,
      431,  431,  431,  432,  432,  432,  432,  432,  433,  434,
      434,  435,  435,  435,  435,  435,  435,  435,  435,  435,

      435,  435,  435,  435,  436,  437,  438,  439,  440,  441,
      442,  443,  444,  445,  446,  447,  449,  450,  451,  452,
      453,  454,  455,  456,  457,  458,  458,  459,  459,  459,
      460,  460,  461,  462,  462,  462,  462,  463,  464,  464,
      465,  466,  466,  467,  467,  467,  468,  468,  468,  468,
      468,  468,  469,  469,  469,  470,  470,  471,  471,  471,
      471,  472,  472,  473,  474,  474,  474,  474,  475,  476,
      476,  477,  478,  478,  478,  479,  479,  479,  480,  481,
      481,  481,  481,  481,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  482,  482,  483,  483,  483,  484,  484,

      486,  486,  486,  487,  487,  488,  488,  488,  489,  490,
      490,  490,  490,  491,  492,  493,  493,  493,  494,  494,
      495,  495,  496,  496,  496,  496,  496,  496,  497,  497,
      497,  498,  498,  499,  499,  499,  499,  500,  501,  501,
      502,  502,  503,  503,  504,  504,  504,  505,  505,  506,
      506,  507,  507,  508,  508,  509,  510,  511,  511,  512,
      513,  513,  514,  514,  515,  515,  515,  515,  515,  516,
      516,  517,  518,  519,  519,  519,  519,  520,  520,  521,
      521,  522,  522,  523,  524,  524,  524,  525,  525,  525,
      525,  526,  526,  526,  526,  526,  526,  526,  527,  527,

      528,  528,  529,  529,  530,  530,  531,  531,  531,  532,
      532,  533,  533,  534,  534,  534,  535,  535,  536,  536,
      536,  537,  537,  537,  538,  538,  539,  539,  539,  540,
      541,  541,  542,  542,  543,  543,  543,  543,  543,  544,
      546,  547,  548,  550,  551,  552,  552,  552,  552,  552,
      552,  552,  553,  553,  553,  553,  553,  554,  555,  556,
      557,  558,  559,  560,  561,  562,  562,  563,  564,  565,
      566,  567,  568,  569,  570,  571,  572,  573,  574,  575,
      575,  576,  576,  576,  576,  577,  578,  578,  579,  580,
      580,  581,  581,  581,  581,  581,  581,  581,  582,  582,

      583,  584,  585,  586,  587,  587,  587,  588,  588,  589,
      589,  589,  589,  589,  589,  589,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  590,  590,  590,  590,  590,  590,  590,
      590,  590,  590,  591,  592,  593,  593,  593,  594,  594,
      595,  595,  595,  595,  595,  595,  595,  596,  597,  598,
      598,  598,  598,  598,  598,  598,  598,  599,  600,  601,
      604,  605,  606,  606,  607,  608,  609,  609,  610,  613,
      614,  615,  616,  617,  618,  619,  619,  619,  620,  621,
      622,  622,  622,  622,  623,  623,  624,  625,  626,  626,

      626,  627,  627,  627,  627,  627,  627,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  628,  628,  629,  629,
      629,  629,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  630,  631,  631,  631,  631,  631,
      632,  632,  632,  633,  633,  633,  633,  633,  633,  634,
      636,  637,  638,  639,  640,  641,  643,  644,  645,  646,
      647,  647,  647,  648,  649,  649,  649,  649,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,

      650,  650,  650,  650,  650,  650,  650,  650,  650,  650,
      650,  650,  650,  651,  651,  651,  651,  651,  652,  653,
      654,  655,  656,  657,  658,  659,  660,  660,  660,  661,
      662,  662,  662,  662,  663,  663,  663,  663,  663,  663,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      664,  664,  664,  664,  664,  664,  664,  664,  664,  664,
      665,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  667,  668,
      669,  670,  671,  672,  673,  674,  674,  674,  675,  676,

      676,  676,  676,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  677,  677,  677,  677,
      677,  677,  677,  677,  677,  677,  678,  679,  679,  679,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  680,  680,  680,  680,  680,  680,  680,  680,  680,
      680,  681,  682,  683,  684,  685,  686,  687,  689,  690,
      691,  693,  695,  696,  697,  698,  700,  701,  702,  703,
      704,  705,  706,  707,  708,  709,  710,  710,  710,  710,
      710,  710,  710,  711,  712,  713,  714,  715,  715,  715,
      715,  715,  715,  716,  717,  718,  719,  720,  721,  722,

      723,  724,  725,  726,  726,  726,  727,  728,  729,  730,
      731,  732,  733,  734,  734,  734,  734,  734,  734,  734,
      734,  734,  735,  735,  735,  736,  737,  738,  738,  739,
      740,  740,  740,  740,  740,  740,  740,  740,  740,  740,
      740,  741,  741,  742,  742,  742,  742,  742,  743,  743,
      743,  745,  745,  747,  747,  748,  749,  749,  751,  751,
      752,  752,  752,  752,  752,  753,  754,  754
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    8,    8,    1,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   18,   18,   18,   20,    1,   21,
        1,   22,    1,   23,   24,   25,   26,   27,   28,   26,
       29,   30,   31,   26,   26,   32,   33,   26,   34,   35,
       26,   36,   26,   37,   38,   26,   26,   26,   26,   26,
       39,   40,   41,    1,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   26,   52,   53,   54,   55,
       56,   57,   26,   58,   59,   60,   61,   62,   26,   63,
       64,   26,   65,    1,   66,   67,    1,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,

       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68
    } ;

static yyconst flex_int32_t yy_meta[69] =
    {   0,
        1,    2,    3,    4,    5,    1,    1,    6,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   17,
        6,   18,   19,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,    1,   21,
        1,   22,   20,   20,   20,   20,   20,   20,   20,   20,
       23,   20,   20,   20,   24,   20,   20,   20,   20,   20,
       20,   20,   20,   20,    6,   25,   26,   27
    } ;

static yyconst flex_int16_t yy_base[1275] =
    {   0,
        0,    0,    0,   67,   83,  150, 4573, 4572,  217,    0,
      285,    0,  353,  420,  487,  554,  621,    0,  689,    0,
       67,   68,   70,   73,  757,  824,  891,    0,  959,    0,
     1027,    0, 1095,    0,   99,  106, 1163,    0,  162,  165,
     1231,    0,  123,  129,  374,  393,   75,   76, 1299,    0,
      135,  139,  173,  377,  441,  442,   93,   95, 1367,    0,
      460,  502,  140,  142, 1435,    0, 1503,    0,  412,  435,
      499,  508, 1571,    0,  363,  368,  511,  566, 1639,    0,
     4573, 7598, 7598,  527,  399, 4560, 4557, 4539,  568, 1702,
     1756,  185, 1816,  770, 4536,  846, 7598, 7598, 4551,  167,

      433,  797, 4549, 7598, 7598, 7598,    0,  101,  464, 7598,
      190,  452,  785, 1707, 4531,  583,  474,  515, 7598, 7598,
     4538,  775,  838, 4497, 1752, 7598, 7598, 4485, 1698, 1727,
     1766, 7598, 1810,  868, 1831, 1839, 1864, 4445, 1883,  607,
     7598, 7598,    0,  538, 7598, 7598, 4454,  779, 7598, 7598,
     4453,  801, 7598, 7598, 4449, 1705, 1791, 1892, 7598, 7598,
        0, 1917, 1815, 7598, 1913, 1936, 1941, 1960, 4434, 1968,
     1869,  872, 7598, 7598,    0, 4437, 1925, 7598, 4436, 1972,
        0, 7598, 1976, 7598, 7598,    0, 4408,  369, 7598, 4409,
     1977, 2043, 7598,    0, 4404, 7598,  207, 7598, 4438, 4399,

        0, 7598, 7598, 4422, 4426, 4390,   72, 7598, 7598, 1987,
     7598, 7598,    0, 1991, 7598,  533, 7598, 4394,    0, 7598,
     7598,  337,  348,    0, 7598, 7598,  545, 1734, 7598, 7598,
     1999, 7598, 7598,    0, 2007,    0, 7598, 7598, 7598, 7598,
     2017, 7598, 7598, 2021, 7598, 7598,    0,  369, 4393, 7598,
     7598,    0,  391, 4392,    0, 7598, 4385, 4384, 7598, 7598,
        0, 4389,    0, 7598, 4415, 4387,    0, 7598, 7598, 4361,
      144, 7598, 7598,    0, 4384, 1873, 2103, 2163, 1902, 2029,
     4378, 4412, 7598,    0, 4395, 4390,    0, 7598, 7598, 2230,
     4389,  446, 4394,  354,  565, 1698,  833, 1698, 2034,   77,

     1718, 4360, 4345, 7598,  320, 2297, 4338, 4343, 4356, 4346,
      803,  474, 4342, 7598, 7598,    0, 2058, 1726, 2035, 2053,
     2055, 2077, 2082, 2098, 2094, 2104, 7598,  542,  612, 7598,
     4386, 7598, 2088, 1770, 2113,  806, 7598, 2120, 4386, 7598,
      458, 4378,  464, 4366,  877, 7598, 4331, 2159, 2188, 4363,
     2196, 2256, 2178, 2284, 2262, 1796, 7598, 4328, 2215, 2305,
        0, 4373, 7598, 2263, 2138, 2295, 1887, 7598, 2305, 4372,
     4356, 2307, 2237, 2314, 7598, 4370, 1946, 7598, 2326, 2336,
     2365, 4356, 2373, 2392, 2396, 2411, 2419,    0, 2439, 2443,
     2458, 1844,    0, 2113, 7598, 4321, 4361, 7598, 2154, 7598,

     4314, 4354, 7598, 2204, 7598, 4301, 4321, 7598, 2333, 2340,
     2367, 2220, 7598, 2417, 2470, 2478,    0, 2482, 4304, 2490,
     2230, 7598, 4270, 2501, 2509, 4297, 2528, 2536, 2555, 2563,
     2582, 2289, 7598, 4263, 2587, 2601,    0, 4294, 4275, 4264,
     2401, 7598, 4226, 4259, 4223, 2423, 7598, 4219,    0, 2448,
     7598, 4218,    0, 4217, 1858, 7598, 4229, 4226, 7598, 4258,
     2463, 7598, 4213,    0, 4212, 1953, 4257, 4256, 7598, 4209,
        0, 7598, 7598, 4205, 4201, 2517, 7598, 4200,    0, 2521,
     7598, 4196, 2540, 7598, 4205, 4193,    0,   74, 4195, 4188,
        0, 4185, 4191, 4195,  806, 4184, 2544, 7598, 4183,    0,

     2548, 7598, 4182,    0, 2568, 7598, 4181, 2572, 7598, 4174,
      517, 4214,  585, 4201, 4167,  800, 4209, 1726, 4197, 4162,
        0, 4205, 1729,    0, 4160,    0,  175, 4159,    0,    0,
     4158,    0, 4157, 4160, 4149, 4181,    0, 4181, 7598, 7598,
     4172, 2630, 4171, 4175, 7598, 4173, 4140, 4122, 2045, 1760,
     2144, 7598, 1863, 1922, 4099, 4098,  544, 2033,    0, 2001,
     2092, 2011, 2576, 7598, 7598,    0, 2137, 2609, 2084,    0,
        0, 2614, 2618, 2592, 2616, 2623, 2659, 2670, 2660, 2667,
     2669,    0, 4095, 4094,    0, 2674, 2686, 2695, 2702, 2711,
     2721, 4128, 2607, 2711, 4062, 4050, 4049, 2728, 2733, 2738,

     2761, 2781, 2789, 2801, 4048, 4047,    0,    0, 4081, 4045,
     4035, 4043, 4042, 4041,    0,    0, 4035, 4032, 4031, 4034,
     4026, 4015, 4014, 4013, 4004, 4016, 4003, 3997, 4001, 2023,
     3987, 3995, 3991, 3981, 3980, 3978, 3975, 3972,    0, 3971,
        0, 3967, 7598, 7598, 7598, 3965, 3993, 2172, 3961,    0,
     3960, 3955, 1775, 3928, 3372,    0, 2800, 2279, 7598, 3321,
     3319, 3350, 2311, 1870, 3328, 3309, 2386, 7598,    0, 2823,
     2676, 2622, 3294, 2699, 2890, 2727, 3318, 2892, 2947, 2931,
     2891, 2932, 2938, 2734, 2883, 3301, 3299, 2889, 2963, 7598,
     3297, 3294, 3293, 2979,    0, 2908, 3002, 3021, 3287, 3283,

     3306, 3266, 3255, 3248, 3231, 3230,    0, 3222, 3218, 3213,
     2982, 3211, 3207, 3195, 3175, 3182, 3172, 7598, 3166, 3166,
     3164, 7598, 3158, 3170, 3149, 3141, 3139, 3128, 3121, 3120,
     3116, 3112, 3111, 3102, 2624, 3087, 3086, 3082, 3081, 7598,
     3116, 3035, 7598, 3048, 3028, 1940, 3006, 3010,    0, 2655,
     2755, 2919, 2982, 2988, 3047, 3094, 3078, 3083, 3079, 3039,
     2991, 2986, 3104, 3123, 2984, 2982, 2970, 3132, 3058, 2969,
     2963, 2962, 2955, 2955, 2944, 2935, 2929, 2928, 2892, 2879,
     2874, 2865, 2877, 1786, 2856, 2867, 2854, 2855, 2775, 2771,
     2765, 2744, 2740, 2727, 2730,  552, 2716, 2722, 2718, 1853,

     2720, 2715, 2709, 2705, 2700, 2693, 2683, 2678, 2676, 2661,
     2646, 2645, 2672, 2621, 2631, 2616, 2608, 2896, 2913, 7598,
     2917, 3087, 3124, 3145, 3151, 3138, 2615, 2604, 3157, 3164,
     2591, 2589, 2571, 3172, 3215, 3223, 2569, 2564, 2563, 7598,
     2557, 2556, 2555, 2549, 2544, 2538, 2523, 2503, 2508, 2501,
     2500, 2509, 2488, 2477, 2481, 2484, 2483, 2472, 2471, 7598,
     2459,    0,    0, 2453, 7598, 2436, 2794, 2419, 2420, 2426,
     2425, 2420, 2414, 2412, 2410, 2394, 2392, 2386, 2375, 2374,
     2373, 2367, 2366, 2357, 2334, 2331, 2322, 2902, 2995, 2996,
     3088, 3163, 3191, 3197, 3229, 2314, 2313, 3231, 3236, 2307,

     2303, 2301, 3243, 2297, 2286, 2274, 2270, 2268, 2259, 2243,
     2232, 2227, 2228,    0, 2221, 2226, 2212, 2206, 2212, 2193,
     2190, 2169, 2168, 2163,    0, 7598, 7598, 2157, 2167, 7598,
     2170, 2147, 2135, 2135, 2131, 2130, 2118, 2109, 2107, 2090,
     2077, 2065, 2055, 2049, 2043, 2032, 2021, 1998, 2031, 2021,
     3205, 2979, 3068, 3252, 3259, 3265, 3234, 3262, 7598, 7598,
     3264, 3290, 7598, 7598, 7598, 3280, 7598, 7598, 7598, 7598,
     7598, 7598, 7598, 7598, 7598, 7598, 1974, 1958, 1960, 1956,
     1964, 1950, 7598, 7598, 7598, 7598, 7598, 1939, 1926, 2795,
     1931, 1912, 7598, 7598, 7598, 7598, 7598, 7598, 7598, 7598,

     7598, 7598, 7598, 1932, 1931, 7598, 7598, 3193, 3270, 3288,
      843, 3293, 3306, 1870, 1868, 1848, 1824, 1805, 1800, 1773,
     1755, 7598, 1741, 1735, 7598, 3311, 3312,  730, 3313, 3322,
     1722, 1686, 1671, 1662, 1673, 1649,  813, 2812,  795,  759,
     3324,  767, 3329,  712,  462,  408,  353, 7598, 3052,  148,
     3063,  558, 3330,   83, 3064, 7598,   56, 3069, 2014, 3070,
       26, 1951, 3185,  532, 7598, 3334, 7598, 3382, 3409, 3436,
     3463, 3490, 3517, 3544, 3571, 3598, 3625, 3652, 3679, 3706,
     3733, 3760, 3787, 3814, 3841, 3868, 3895, 3922, 3949, 3976,
     3997, 4014, 4030, 4049, 4065, 4084, 4110, 4127, 4154, 4162,

     4176, 4202, 4228, 4254, 4281, 4298, 4325, 4342, 4368, 4394,
     4420, 4435, 4462, 4489, 4516, 4533, 4541, 4567, 4593, 4619,
     4645, 4653, 4667, 4682, 4709, 4724, 4751, 4778, 4793, 4820,
     4847, 4862, 4889, 4916, 4931, 4958, 4966, 4980, 4988, 5002,
     5029, 5044, 5071, 5098, 5113, 5135, 5161, 5169, 5181, 5198,
     5210, 5234, 5242, 3321, 5258, 5281, 5305, 5322, 5339, 5366,
     5380, 5401, 5427, 5453, 5479, 5491, 5518, 5535, 5552, 5579,
     5596, 5613, 5639, 5665, 5691, 5718, 5744, 5759, 5786, 5813,
     5840, 5857, 5874, 5900, 5908, 5934, 5960, 5986, 6012, 6024,
     6038, 6059, 6074, 6101, 6116, 6143, 6170, 6191, 6206, 6233,

     6260, 6275, 6302, 6329, 6344, 6371, 6385, 6406, 6420, 6441,
     6468, 6483, 6510, 6537, 3327, 6552, 6564, 6591, 6606, 6620,
     6644, 6671, 6697, 3344, 6720, 6744, 3356, 3985, 6770, 6784,
     6801, 6809, 6821, 6838, 6855, 6872, 6889, 6916, 6942, 6959,
     6976, 7002, 7028, 7054, 7066, 7074, 7088, 7096, 7108, 7135,
     7143, 7151, 3990, 7178, 7193, 7209, 7233, 4037, 7259, 7283,
     7291, 7314, 7328, 7345, 7362, 7370, 7385, 7409, 7435, 7462,
     7489, 7516, 7543, 7570
    } ;

static yyconst flex_int16_t yy_def[1275] =
    {   0,
     1068, 1068, 1067,    3, 1069, 1069, 1070, 1070, 1067,    9,
     1067,   11, 1071, 1071, 1072, 1072, 1067,   17, 1067,   19,
     1073, 1073, 1074, 1074, 1075, 1075, 1067,   27, 1067,   29,
     1067,   31, 1067,   33, 1076, 1076, 1067,   37, 1077, 1077,
     1067,   41, 1078, 1078, 1079, 1079, 1080, 1080, 1067,   49,
     1081, 1081, 1082, 1082, 1083, 1083, 1084, 1084, 1067,   59,
     1085, 1085, 1086, 1086, 1067,   65, 1067,   67, 1087, 1087,
     1087, 1087, 1067,   73, 1088, 1088, 1089, 1089, 1067,   79,
     1067, 1067, 1067, 1067, 1067, 1090, 1091, 1092, 1093, 1067,
     1094, 1095, 1096, 1067, 1092, 1093, 1067, 1067, 1097, 1098,

     1098, 1098, 1099, 1067, 1067, 1067, 1100, 1101, 1067, 1067,
     1067, 1067, 1102, 1102, 1067, 1103, 1067, 1104, 1067, 1067,
     1105, 1106, 1106, 1067, 1106, 1067, 1067, 1107, 1108, 1108,
     1108, 1067, 1108, 1067, 1067, 1109, 1109, 1067, 1110, 1111,
     1067, 1067, 1112, 1067, 1067, 1067, 1113, 1067, 1067, 1067,
     1114, 1067, 1067, 1067, 1115, 1116, 1116, 1116, 1067, 1067,
     1117, 1118, 1067, 1067, 1067, 1067, 1119, 1119, 1067, 1120,
     1067, 1121, 1067, 1067, 1122, 1123, 1067, 1067, 1124, 1067,
     1125, 1067, 1067, 1067, 1067, 1126, 1067, 1127, 1067, 1128,
     1067, 1067, 1067, 1129, 1067, 1067, 1067, 1067, 1130, 1067,

     1131, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1132, 1067, 1067, 1067, 1067, 1067, 1133, 1067,
     1067, 1067, 1067, 1134, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1135, 1067, 1136, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1137, 1138, 1067, 1067,
     1067, 1139, 1140, 1067, 1141, 1067, 1067, 1067, 1067, 1067,
     1142, 1067, 1143, 1067, 1067, 1067, 1144, 1067, 1067, 1067,
     1067, 1067, 1067, 1145, 1067, 1067, 1146, 1146, 1067, 1067,
     1067, 1147, 1067, 1148, 1149, 1150, 1151, 1067, 1067, 1152,
     1150, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1153, 1146, 1153,  306,  306,  306,
      306,  306,  306, 1067, 1067, 1154, 1155, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1067, 1067, 1067, 1067, 1067,
     1157, 1067, 1158, 1159, 1158, 1067, 1067, 1158, 1160, 1067,
     1161, 1162, 1161, 1067, 1067, 1067, 1067, 1067, 1163, 1067,
     1163, 1164, 1165, 1163, 1164, 1067, 1067, 1067, 1165, 1165,
     1166, 1167, 1067, 1168, 1169, 1168, 1067, 1067, 1168, 1170,
     1067, 1171, 1172, 1171, 1067, 1170, 1067, 1067, 1171, 1067,
     1173, 1067, 1173, 1174, 1175, 1173, 1067, 1176, 1174, 1175,
     1175, 1177, 1178, 1067, 1067, 1067, 1179, 1067, 1067, 1067,

     1067, 1180, 1067, 1067, 1067, 1067, 1181, 1067, 1182, 1183,
     1182, 1067, 1067, 1182, 1184, 1067, 1185, 1184, 1067, 1186,
     1067, 1067, 1067, 1067, 1187, 1067, 1187, 1188, 1189, 1187,
     1188, 1067, 1067, 1067, 1189, 1189, 1190, 1191, 1192, 1191,
     1067, 1067, 1067, 1193, 1067, 1067, 1067, 1067, 1194, 1067,
     1067, 1067, 1195, 1067, 1196, 1067, 1197, 1067, 1067, 1198,
     1067, 1067, 1067, 1199, 1067, 1067, 1200, 1200, 1067, 1067,
     1201, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1202, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1203, 1067, 1067, 1067,
     1204, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1205,

     1067, 1067, 1067, 1206, 1067, 1067, 1067, 1067, 1067, 1067,
     1207, 1208, 1207, 1067, 1067, 1209, 1210, 1209, 1067, 1067,
     1211, 1067, 1067, 1212, 1067, 1213, 1067, 1067, 1214, 1215,
     1067, 1216, 1067, 1067, 1067, 1217, 1218, 1219, 1067, 1067,
     1220, 1221, 1220, 1219, 1067, 1067, 1067, 1067, 1067, 1067,
     1222, 1067, 1067, 1067, 1067, 1067, 1223, 1223, 1224, 1067,
     1225, 1225, 1225, 1067, 1067, 1226, 1225, 1225, 1225, 1227,
     1228, 1229, 1229, 1229, 1229, 1229, 1229, 1229, 1230, 1230,
     1231, 1232, 1067, 1067, 1233, 1234, 1234, 1235, 1236, 1236,
     1237, 1238, 1067, 1239, 1067, 1067, 1067, 1240, 1240, 1241,

     1242, 1243, 1244, 1244, 1067, 1067, 1245, 1246, 1247, 1067,
     1067, 1067, 1067, 1067, 1248, 1249, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1250, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1251, 1067,
     1252, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1253,
     1067, 1067, 1067, 1067, 1254, 1255, 1256, 1067, 1067, 1067,
     1067, 1257, 1257, 1067, 1067, 1067, 1067, 1067, 1258, 1067,
     1259, 1259, 1260, 1259, 1259, 1259, 1261, 1262, 1262, 1262,
     1262, 1262, 1262, 1262, 1263, 1067, 1067, 1264, 1265, 1067,
     1067, 1067, 1067, 1241, 1266, 1242, 1242, 1243, 1067, 1067,

     1247, 1067, 1067, 1067, 1067, 1067, 1249, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1267, 1256, 1067, 1067, 1067, 1067, 1067, 1067, 1268, 1268,
     1259, 1259, 1067, 1259, 1262, 1261, 1262, 1262, 1262, 1263,
     1067, 1067, 1264, 1265, 1067, 1067, 1067, 1241, 1269, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1270, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1267, 1067, 1067, 1067, 1067, 1259, 1259, 1067,
     1259, 1262, 1262, 1262, 1262, 1263, 1067, 1067, 1264, 1265,
     1067, 1067, 1067, 1241, 1269, 1269, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1271, 1272, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1259, 1259, 1259,
     1262, 1262, 1262, 1262, 1263, 1067, 1067, 1264, 1265, 1067,

     1067, 1067, 1241, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1273, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1274, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1259, 1259, 1259, 1262, 1262, 1262, 1262, 1263, 1067, 1067,
     1264, 1265, 1067, 1067, 1067, 1241, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1259, 1259, 1067,
     1261, 1262, 1262, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1259, 1259, 1261, 1262, 1262,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1259, 1261, 1262, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1259, 1261, 1262, 1067, 1067, 1067, 1067, 1067, 1261, 1067,
     1067, 1261, 1067, 1261, 1067, 1261,    0, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067
    } ;

static yyconst flex_int16_t yy_nxt[7667] =
    {   0,
       83,   84,   85,   83,   84,   83,   86,   83,   87,   83,
       83,   83,   88,   83,   88,   89,   83,   88,   88,   83,
       90,   83,   91,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   83,   93,
       83,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
       92,   92,   92,   92,   83,   83,   83,   83,   94,  146,
      146,   94,  150,  147,  147,  150,  151,  209,  209,  151,
     1063,   95,   96,   97,   97,   98,   97,   97,   97,   99,
       97,   97,   97,   97,   97,  230,   97,  230,   97,  101,

      554,  182,  101,   97,   97,   97,  148,  148,  182,  152,
       82, 1061,  152,  475,  210,  210,  342,   82,  474,  554,
      344,   97,  102,   97,  197,  198,  625,  197,  626,  199,
      197,  198,  231,  197,  231,  199,  216,  217,  183,  216,
      216,  217,  243,  216,  243,  183,  914,   97,   97,   97,
       97,   97,   98,   97,   97,   97,   99,   97,   97,   97,
       97,   97,  200,   97,  189,   97,  101,  189,  200,  101,
       97,   97,   97,  190,  218,  220,  190,  221,  218,  244,
      647,  244,  334,  335,  191,  531,  335,  191,   97,  102,
       97,  348,  348,  348,  348,  222,  648,  286, 1057,  286,

      286,  192,  286,  286,  192,  349,  335,  287,  466,  350,
      530,  466,  223,  467,   97,   97,   97,  105,  105,  106,
      105,  105,  105,  105,  105,  107,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  105,  109,  105,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  105,  105,  105,  108,  110,  111,  112,  111,  111,
      110,  110,  110,  113,  110,  110,  110,  110,  110,  110,

      114,  110,  110,  110,  115,  110,  110,  110,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  110,  117,  110,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  110,
      110,  118,  116,  119,  119,  120,  119,  119,  119,  121,
      119,  119,  119,  119,  119,  264,  119,  558,  119,  123,
      264,  456,  123,  124,  119,  119,  202,  265,  203,  220,
      457,  221,  265,  488,  512,  204,  559,  489,  514,  490,
      205,  119,  125,  119,  488,  202,  206,  203,  489,  222,

      279,  280,  266,  279,  204, 1055,  517,  266,  458,  205,
      519,  547,  548,  207,  256,  206,  223,  119,  119,  119,
      119,  119,  120,  119,  119,  119,  121,  119,  119,  119,
      119,  119,  207,  119,  257,  119,  123,  256,  281,  123,
      124,  119,  119,  225,  225,  226,  226,  545, 1067,  335,
      545,  257,  335,  348,  348,  348,  348,  257,  119,  125,
      119,  914,  237,  227,  227,  345,  346,  349,  345,  238,
      239,  350,  335,  342,  257,  356,  357,  344,  356,  342,
      228,  228,  240,  344,  119,  119,  119,  126,  126,  127,
      126,  126,  126,  128,  126,  126,  126,  126,  126,  241,

      126,  256,  126,  130,  237,  347,  130,  131,  132,  126,
      256,  238,  239,  268, 1054,  358,  359,  359,  359,  359,
      567,  258,  269,  360,  240,  126,  133,  126,  276,  568,
      258,  276,  512,  270,  483,  484,  514,  483,  258,  394,
      395,  241,  394,  329,  330,  667,  329,  258,  667,  277,
      271,  126,  126,  126,  126,  126,  127,  126,  126,  126,
      128,  126,  126,  126,  126,  126,  278,  126,  268,  126,
      130,  571,  485,  130,  131,  132,  126,  269,  288,  396,
      286,  289,  286,  290,  348,  348,  348,  348,  270, 1066,
      287,  492,  126,  133,  126,  493,  549,  571,  349,  865,

      512,  494,  350,  495,  514,  271,  866,  292,  390,  390,
      390,  390, 1059,  329,  330,  391,  329,  549,  126,  126,
      126,  110,  134,  135,  134,  134,  110,  110,  110,  136,
      110,  110,  110,  110,  110,  110,  137,  110,  110,  110,
      138,  110,  110,  110,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  110,
      117,  110,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  110,  110,  140,  139,  141,
      141,  142,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  141,  144,  141,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  143,  143,  143,  143,  143,  143,  143,
      143,  143,  143,  141,  141,  141,  143,  153,  153,  154,
      153,  153,  153,  155,  153,  153,  153,  153,  153,  571,
      153,  326,  153,  157,  326,  914,  157,  153,  153,  153,
      399,  400, 1042,  399,  327,  328,  348,  348,  348,  348,
      365,  366,  277,  351,  366,  153,  158,  153,  336,  337,

      349,  336,  404,  405,  350,  404,  571,  336,  337,  278,
      336,  564, 1067,  335,  366,  517,  335, 1052, 1050,  519,
      401,  153,  153,  153,  153,  153,  154,  153,  153,  153,
      155,  153,  153,  153,  153,  153,  335,  153,  338,  153,
      157,  565,  406,  157,  153,  153,  153,  329,  330, 1049,
      329,  353,  632, 1067,  366, 1047,  288,  366,  286,  289,
      286,  290,  153,  158,  153,  550,  633,  566,  287,  380,
      380,  380,  380,  435,  435,  435,  435,  366,  345,  346,
      436,  345, 1067,  381, 1028,  292,  550,  382,  153,  153,
      153,  159,  159,  160,  159,  159,  159,  159,  159,  161,

      159,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  159,  159,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  159,
      163,  159,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  162,  162,  162,  162,  162,
      162,  162,  162,  162,  162,  159,  159,  159,  162,  164,
      165,  166,  165,  165,  164,  164,  164,  167,  164,  164,
      164,  164,  164,  164,  168,  164,  164,  164,  169,  164,
      164,  164,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  164,  171,  164,

      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  164,  164,  172,  170,  173,  173,  174,
      173,  173,  173,  173,  173,  175,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  173,  177,  173,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  176,  176,  176,  176,  176,  176,
      176,  173,  173,  173,  176,   82,   82,  178,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,   82,  180,   82,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  179,  179,   82,
       82,   82,  179,  184,  184,  185,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  184,  184,  184,  184,
      184,  184,  184,  184,  184,  184,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,

      186,  184,  187,  184,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      186,  186,  186,  186,  186,  186,  186,  184,  184,  184,
      186,   82,   82,  193,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,   82,
      195,   82,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,   82,   82,   82,  194,  211,

      211,  212,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  211,  214,  211,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  213,  213,  213,  213,
      213,  213,  213,  211,  211,  211,  213,  232,  232,  233,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,

      234,  234,  234,  234,  234,  232,  235,  232,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  234,  234,
      234,  232,  232,  232,  234,  245,  245,  246,  245,  245,
      245,  245,  245,  247,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  245,  245,  245,  245,  245,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  245,  249,  245,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  245,

      245,  245,  248,  250,  250,  251,  250,  250,  250,  250,
      250,  252,  250,  250,  250,  250,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  250,  254,  250,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  253,  253,  253,
      253,  253,  253,  253,  253,  253,  253,  250,  250,  250,
      253,  259,  259,  260,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  259,  259,
      259,  259,  259,  259,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  261,  261,  261,  261,  261,  259,
      262,  259,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  261,  261,  261,  261,  261,
      261,  261,  261,  261,  261,  259,  259,  259,  261,  272,
      272,  273,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  272,  275,  272,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,

      274,  274,  274,  272,  272,  272,  274,  293,  354,  354,
      354,  354,  914,  373,  374,  351,  549,  374,  294,  375,
      410,  411,  349, 1046,  411,  914,  350,  560,  295,  549,
      560,  296,  297,  549,  914,  298,  299,  374,  300,  301,
     1045,  517, 1067,  374,  411,  519,  374,  295, 1067,  549,
      549,  296,  297,  367,  368,  549,  367,  298,  299,  302,
      303,  300,  301,  304,  304,  571,  374, 1067,  366,  644,
      549,  366,  376,  353, 1044,  496,  304,  304,  305, 1040,
      492, 1067,  374,  668,  493,  374,  580,  375,  549,  580,
      494,  366,  495,  369,  645,  307, 1039,  356,  357,  308,

      356,  309,  310,  311, 1038,  374, 1067,  411,  549,  580,
      411,  377,  378,  668,  377,  312,  421,  422,  313,  421,
      314,  315,  316,  304,  304, 1067,  374, 1037,  851,  374,
      411, 1067,  380,  380,  380,  380,  304,  304,  307,  668,
      380,  380,  380,  380,  852,  593,  381,  383,  593,  374,
      382,  379, 1036,  388,  381,  305,  423,  319,  382,  320,
      456,  321,  322,  323, 1035,  386,  386,  386,  386,  457,
      432,  433,  383,  432,  276,  324, 1034,  276,  325,  381,
      314,  315,  316,  382,  387,  380,  380,  387,  367,  368,
      549,  367,  388,  412,  413,  277,  412,  458,  381,  870,

     1033,  746,  382,  279,  280,  385,  279, 1067,  411,  549,
      434,  411,  278,  871,  424,  424,  424,  424,  416,  416,
      416,  416,  746, 1032, 1031,  417,  441,  442,  425,  441,
      385,  411,  426,  414,  418,  418,  419,  424,  424,  424,
      424,  281,  424,  424,  424,  424,  664,  377,  378,  427,
      377,  425, 1006, 1025,  466,  426,  425,  466, 1024,  467,
      426,  430,  430,  430,  430,  664,  443,  549,  427,  424,
      424,  424,  424,  446,  447,  425,  446,  450,  451,  426,
      450, 1023, 1021,  425,  459,  459,  549,  426,  476,  477,
      571,  476,  480,  481, 1064,  480, 1020,  459,  459,  460,

      497,  498,  560,  497, 1019,  560, 1018,  429,  501,  502,
     1017,  501,  560,  448, 1016,  560,  459,  452,  505,  506,
     1015,  505,  508,  509,  722,  508,  429,  722,  478, 1014,
      279,  280,  482,  279,  667,  551,  560,  667,  551,  560,
      499,  668, 1007,  459,  461,  462,  551,  461,  503,  551,
      459,  459, 1006,  571,  560,  552,  560,  560,  507,  560,
     1062, 1005,  510,  459,  459,  459,  552,  671,  281,  553,
      286,  668,  286,  286,  571,  286,  286,  723,  560, 1004,
      287,  560,  460,  560,  463,  560,  560,  572,  560,  280,
      564,  553,  571,  560,  571,  560,  560,  668,  560,  560,

     1003,  574,  560,  334,  335,  326, 1002,  335,  326,  459,
      304,  304, 1001,  573,  394,  395,  571,  394,  327,  328,
      565,  571, 1000,  304,  304,  534,  277,  335, 1067,  335,
      676,  575,  335,  571,  999,  334,  335,  571,  560,  335,
      670,  560,  304,  278,  576,  663,  566,  998,  663,  310,
      311,  578,  335,  577,  587,  399,  400,  587,  399,  335,
      348,  348,  348,  348,  997,  552,  996,  314,  315,  316,
      304,  304,  581,  735,  349,  995,  735,  587,  350,  359,
      359,  359,  359,  304,  304,  304,  360,  994,  993,  354,
      354,  354,  354,  992,  991,  674,  351, 1067, 1067, 1067,

     1067,  990,  534,  349, 1067,  404,  405,  350,  404,  310,
      311, 1067,  989,  988,  987, 1067,  359,  359,  359,  359,
      484,  412,  413,  360,  412,  985,  984,  314,  315,  316,
      539,  421,  422,  539,  421,  539,  539,  539,  539,  539,
      540,  539,  541,  539,  541,  542,  539,  983,  982,  539,
      539,  539,  544,  590,  353,  981,  590,  348,  348,  348,
      348,  980, 1067,  348,  348,  348,  348,  979,  539,  539,
      539,  349,  978,  977,  914,  350,  590,  349,  365,  366,
      743,  350,  366,  743,  975,  354,  354,  354,  354,  974,
      432,  433,  351,  432,  539,  539,  539,  539,  560,  349,

      973,  560,  366,  350, 1067, 1067, 1067, 1067, 1067, 1067,
     1067,  366,  663, 1067,  366,  663,  972, 1067, 1067, 1067,
      365,  366,  373,  374,  366,  971,  374,  970,  375, 1067,
      374,  969,  552,  374,  366, 1067, 1067,  380,  380,  380,
      380,  373,  374,  968,  366,  374,  374,  375,  410,  411,
      353,  381,  411,  374,  967,  382,  599,  588,  965,  599,
      964, 1067, 1067, 1067,  963,  374,  386,  386,  386,  386,
      960,  959,  411,  383, 1067, 1067, 1067, 1067,  591,  599,
      381, 1067, 1067,  411,  382,  950,  411,  667, 1067,  949,
      667,  948, 1067,  387,  380,  380,  387,  390,  390,  390,

      390,  388,  441,  442,  391,  441,  411,  381,  947,  946,
      945,  382,  386,  386,  386,  386,  944,  943,  942,  383,
      387,  380,  380,  387,  446,  447,  381,  446,  388,  941,
      382,  385,  410,  411,  381,  940,  411,  939,  382, 1067,
      387,  380,  380,  387,  390,  390,  390,  390,  388,  450,
      451,  391,  450,  938,  381,  937,  411,  936,  382, 1067,
     1067, 1067, 1067,  935,  461,  462, 1067,  461,  934,  600,
      933,  416,  416,  416,  416,  932,  931,  385,  417,  416,
      416,  416,  416,  416,  416,  416,  416,  418,  418,  419,
      417,  416,  416,  416,  416,  929,  928,  419,  417,  418,

      418,  419,  424,  424,  424,  424,  925,  603,  603,  419,
      430,  430,  430,  430,  924,  923,  425,  427,  476,  477,
      426,  476,  480,  481,  425,  480,  922,  921,  426, 1067,
     1067, 1067, 1067,  920,  919,  918, 1067,  424,  424,  424,
      424,  483,  484, 1067,  483,  497,  498, 1067,  497,  501,
      502,  425,  501,  914,  917,  426,  435,  435,  435,  435,
      916,  915,  914,  436,  430,  430,  430,  430,  913,  505,
      506,  427,  505,  508,  509,  429,  508,  560,  425,  485,
      560,  912,  426,  424,  424,  424,  424,  911,  435,  435,
      435,  435,  910,  560, 1067,  436,  560,  425,  909,  908,

      907,  426, 1067, 1067, 1067, 1067,  906,  905,  593, 1067,
      560,  593,  904,  560,  902,  560,  388,  560,  560,  560,
      560,  672,  560,  560,  560,  735,  560,  560,  735,  429,
      539,  571,  901,  539,  900,  539,  539,  539,  539,  539,
      540,  539,  541,  539,  541,  657,  539,  897,  680,  539,
      539,  539,  544,  571,  675,  571,  750,  571,  896,  750,
      560,  681,  571,  560,  678,  887,  679,  886,  539,  658,
      539,  560,  752,  885,  560,  334,  580,  560,  884,  580,
      560,  682, 1067,  580,  334,  335,  580,  656,  335,  365,
      587,  883,  882,  587,  539,  539,  539,  539,  571,  580,

      560, 1067,  587,  560,  683,  587,  580,  881,  335,  571,
      365,  366,  593,  587,  366,  593,  684,  373,  590,  685,
      388,  590,  880,  375,  879,  587, 1067,  590,  560,  878,
      590,  560, 1067,  751,  366,  560,  373,  374,  560,  877,
      374,  590,  375,  410,  599,  688,  876,  599, 1067,  599,
      590,  875,  599,  410,  411,  874,  560,  411,  670,  560,
      374,  873,  416,  416,  416,  416,  872,  599,  869,  695,
      868,  689,  599,  571,  754,  867,  864,  411,  696,  696,
      419,  759,  698,  698,  698,  698,  863,  862,  694,  417,
      416,  416,  416,  416,  861,  930, 1022,  417,  930, 1022,

      419,  818,  416,  416,  416,  416,  603,  603,  419,  417,
      288,  859,  286, 1048,  286,  742, 1048,  858,  603,  603,
      419,  857,  287,  749,  750,  749,  749,  750,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  749,  749,  749,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  749,  749,  749,
      749,  560,  560,  560,  560,  560,  560,  560,  334,  335,

      560,  856,  335,  560,  365,  366,  560,  855,  366,  416,
      416,  416,  416,  854,  560,  853,  695,  560,  560,  850,
      560,  560,  335,  560,  849,  696,  696,  419,  366,  848,
      571,  571,  560,  560,  847,  560,  560,  760,  846,  560,
      888,  758,  560,  763,  951,  670,  755,  749,  750,  749,
      749,  750,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      571,  571,  889,  819,  845,  844,  890,  571,  373,  374,
      560,  843,  374,  560,  375,  749,  756,  749,  757,  560,
      842,  679,  560,  679,  410,  411,  560,  560,  411,  560,

      560,  841,  374,  416,  416,  416,  416,  840,  839,  838,
      695,  749,  749,  749,  749,  837,  833,  764,  411,  696,
      696,  419,  698,  698,  698,  698,  780,  781,  832,  417,
      831,  782,  828,  768,  783,  784, 1009,  827,  821,  785,
      419,  952,  953,  786,  787,  288,  820,  286,  560,  286,
      742,  560,  817, 1056,  334,  335, 1056,  287,  335,  416,
      416,  416,  416,  816, 1058, 1060,  695, 1058, 1060,  560,
     1058, 1060,  560, 1058, 1060,  835,  835,  419,  335,  560,
      560,  815,  560,  560,  560,  826,  571,  560,  560,  560,
      814,  560,  560,  822,  749,  749,  749,  749,  749,  749,

      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  571,  571,  365,
      366,  670,  571,  366,  823,  560,  571,  571,  560,  825,
      891,  656,  749,  749,  749,  812,  811,  824,  373,  374,
      810,  809,  374,  366,  375,  954,  560,  410,  411,  560,
      829,  411,  560,  334,  335,  560,  808,  335,  749,  749,
      749,  749,  374,  571,  560,  807,  806,  560,  892,  830,
      805,  411,  365,  366,  804,  803,  366,  335,  834,  373,
      374,  895,  802,  374,  571,  375, 1065,  410,  411, 1065,
      571,  411,  560,  801,  560,  560,  366,  560,  560,  800,

      898,  560,  571,  374,  893,  955,  560,  899,  799,  560,
      894,  411,  798,  797,  796,  903,  416,  416,  416,  416,
      795,  794,  793,  695,  416,  416,  416,  416,  792,  791,
      571,  695,  835,  835,  419,  560,  571,  956,  560, 1026,
      835,  835,  419,  957,  334,  335,  365,  366,  335,  790,
      366,  373,  374, 1010,  280,  374, 1010,  375,  410,  411,
      560,  789,  411,  560, 1008,  788,  560,  779,  335,  560,
      366,  560,  778,  571,  560,  374,  777,  334,  335,  365,
      366,  335,  411,  366,  776,  775,  958,  679,  961, 1010,
      280, 1011, 1010,  962,  560,  410,  411,  560,  571,  411,

      966,  335,  774,  366,  571,  373,  374,  560,  773,  374,
      560,  375,  560,  560,  560,  560,  560,  560, 1012,  411,
      772,  439, 1013,  560, 1027,  560,  560,  281,  560,  374,
      560, 1058,  571,  560, 1058,  279,  280,  771,  279, 1029,
      570,  770,  570,  570,  570,  571,  650,  767,  766,  650,
      650,  765,  571,  762, 1041,  761,  670,  571,  679,  753,
     1030,  571,  748,  669, 1043,  669,  669,  669,  571,  571,
      747,  552,  745, 1011,  744,  570, 1051,  570,  570,  570,
      740, 1053,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,

      129,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  129,  129,  129,  129,  129,  129,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  145,  145,  145,  145,  145,  145,
      145,  145,  145,  145,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  149,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  156,  156,
      156,  156,  156,  156,  156,  156,  156,  156,  181,  181,

      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  181,  181,  181,
      181,  181,  181,  181,  181,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      188,  188,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  208,  208,  208,  208,  208,  208,  208,
      208,  208,  208,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  224,  224,  224,
      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,

      224,  224,  224,  224,  224,  224,  224,  224,  224,  224,
      224,  224,  224,  224,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  229,  229,  229,  229,  229,
      229,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  242,  242,  242,  242,  242,
      242,  242,  242,  242,  242,  255,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  263,
      263,  263,  263,  263,  263,  263,  263,  263,  263,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  267,  267,  267,  267,
      267,  267,  267,  267,  267,  267,  282,  282,  739,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,

      282,  282,  282,  285,  677,  738,  677,  677,  677,  650,
      737,  736,  650,  650,  648,  734,  285,  733,  285,  285,
      285,  732,  731,  285,  286,  730,  286,  286,  729,  286,
      728,  727,  286,  286,  726,  286,  286,  286,  291,  725,
      291,  291,  291,  291,  724,  291,  721,  720,  291,  291,
      291,  291,  291,  291,  306,  306,  669,  719,  669,  669,
      669,  717,  716,  715,  714,  713,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  317,  712,  317,  317,  711,
      317,  710,  709,  317,  317,  708,  317,  317,  317,  318,
      318,  706,  705,  704,  703,  702,  439,  700,  699,  693,

      692,  318,  318,  318,  318,  318,  318,  318,  318,  318,
      331,  331,  691,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  333,  690,  333,
      333,  333,  333,  333,  687,  686,  333,  333,  333,  333,
      333,  666,  665,  333,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  341,  661,  341,  341,  341,  660,  659,  341,  343,
     1067,  343,  343,  287,  287,  343,  656,  343,  343,  343,

      537,  654,  343,  352,  352,  352,  352,  653,  352,  652,
      651,  649,  646,  643,  642,  352,  517,  641,  352,  640,
      512,  352,  639,  352,  352,  352,  638,  352,  352,  355,
      355,  355,  355,  637,  636,  635,  634,  631,  630,  629,
      628,  355,  627,  355,  355,  624,  486,  355,  623,  355,
      355,  355,  622,  621,  355,  361,  361,  361,  361,  620,
      361,  619,  469,  469,  618,  617,  615,  463,  458,  614,
      613,  612,  611,  361,  445,  361,  361,  361,  610,  439,
      361,  362,  362,  608,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  364,  439,
      364,  364,  364,  364,  364,  606,  425,  364,  364,  364,
      364,  364,  605,  602,  364,  370,  370,  408,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  372,  597,  372,  372,  372,  372,  372,  372,
      403,  372,  372,  372,  372,  372,  596,  398,  372,  384,
      384,  384,  384,  595,  384,  381,  371,  375,  371,  363,
      584,  384,  349,  583,  384,  342,  582,  384,  340,  384,
      384,  384,  332,  384,  384,  389,  389,  389,  389,  569,

      563,  389,  562,  561,  559,  556,  555,  389,  546,  389,
      389,  287,  287,  389,  537,  389,  389,  389,  283,  535,
      389,  392,  392,  392,  392,  533,  392,  530,  528,  527,
      525,  523,  522,  520,  515,  486,  474,  473,  472,  392,
      470,  392,  392,  392,  469,  465,  392,  393,  458,  454,
      393,  445,  439,  425,  393,  408,  393,  393,  393,  403,
      398,  393,  397,  397,  381,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  402,
      402,  371,  402,  402,  402,  402,  402,  402,  402,  402,

      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  407,  407,  363,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  409,  363,  409,  409,  409,  409,  409,
      349,  340,  409,  409,  409,  409,  409,  332,  287,  409,
      415,  287,  415,  415,  415,  284,  283,  415,  420,  420,
      420,  420, 1067,  420,  104,  104, 1067, 1067, 1067, 1067,
     1067, 1067,  420,  420, 1067, 1067,  420, 1067,  420,  420,
      420, 1067, 1067,  420,  428,  428,  428,  428, 1067,  428,

     1067, 1067, 1067, 1067, 1067, 1067,  428, 1067, 1067,  428,
     1067, 1067,  428, 1067,  428,  428,  428, 1067,  428,  428,
      431,  431,  431,  431, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067,  431, 1067,  431,  431, 1067, 1067,  431, 1067,
      431,  431,  431, 1067, 1067,  431,  437,  437,  437,  437,
     1067,  437, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067,  437, 1067,  437,  437,  437, 1067,
     1067,  437,  438, 1067,  438,  438,  438, 1067, 1067,  438,
      440, 1067,  440, 1067, 1067, 1067,  440, 1067,  440,  440,
      440, 1067, 1067,  440,  444,  444, 1067,  444, 1067, 1067,

     1067,  444, 1067,  444,  444,  444, 1067, 1067,  444,  449,
      449, 1067,  449,  449,  449,  449,  449,  449, 1067,  449,
      449,  449,  449,  449,  449,  449,  449,  449,  449, 1067,
      449,  449,  449,  449,  449,  449,  453, 1067, 1067,  453,
     1067, 1067, 1067,  453, 1067,  453,  453,  453, 1067, 1067,
      453,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455, 1067,
      455,  455,  455,  455,  455,  455,  455,  455,  457,  457,
     1067,  457,  457,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457, 1067,  457,  457,  457,

      457,  457,  457,  457,  457,  464, 1067, 1067,  464, 1067,
     1067, 1067,  464, 1067,  464,  464,  464, 1067, 1067,  464,
      468,  468, 1067,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  471,  471, 1067,
      471, 1067,  471,  471,  471,  471, 1067,  471,  471,  471,
      471, 1067,  471,  471,  471, 1067,  471, 1067,  471,  471,
      471,  471,  471,  471,  479, 1067, 1067,  479, 1067, 1067,
     1067,  479, 1067,  479,  479,  479, 1067, 1067,  479,  487,
      487, 1067,  487, 1067,  487,  487,  487,  487,  487,  487,

      487,  487,  487,  487,  487,  487,  487, 1067,  487, 1067,
      487,  487,  487,  487,  487,  487,  491,  491, 1067,  491,
     1067,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491, 1067,  491, 1067,  491,  491,  491,
      491,  491,  491,  500, 1067, 1067,  500, 1067, 1067, 1067,
      500, 1067,  500,  500,  500, 1067, 1067,  500,  504,  504,
     1067,  504,  504,  504,  504, 1067, 1067,  504,  504,  504,
      504,  504,  504,  504,  504,  504, 1067,  504, 1067,  504,
      504,  504,  504,  504,  504,  511, 1067,  511,  511,  511,
     1067, 1067,  511,  513, 1067,  513,  513, 1067, 1067,  513,

     1067,  513,  513,  513, 1067, 1067,  513,  516, 1067,  516,
      516,  516, 1067, 1067,  516,  518, 1067,  518,  518, 1067,
     1067,  518, 1067,  518,  518,  518, 1067, 1067,  518,  521,
      521, 1067,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521,  521, 1067,  521, 1067,
      521,  521,  521,  521,  521,  521,  524, 1067, 1067,  524,
     1067, 1067, 1067,  524, 1067,  524,  524,  524, 1067, 1067,
      524,  526,  526, 1067,  526,  526,  526,  526,  526,  526,
      526,  526,  526, 1067,  526,  526,  526,  526,  526,  526,
      526, 1067,  526,  526,  526,  526,  526,  526,  529,  529,

     1067,  529,  529,  529,  529,  529,  529, 1067,  529,  529,
      529,  529,  529,  529,  529,  529, 1067,  529, 1067,  529,
      529,  529,  529,  529,  529,  532, 1067, 1067,  532, 1067,
     1067, 1067,  532, 1067,  532,  532,  532, 1067, 1067,  532,
      306,  306, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  282,  282, 1067,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  282,  282,
      282,  282,  282,  282,  282,  282,  282,  282,  285, 1067,
      285,  285,  285, 1067, 1067,  285,  536,  536, 1067, 1067,

      536, 1067,  536,  536,  536, 1067, 1067,  536,  286, 1067,
      286,  286, 1067,  286, 1067, 1067,  286,  286, 1067,  286,
      286,  286,  538, 1067, 1067,  538, 1067, 1067, 1067,  538,
     1067,  538,  538,  538,  543, 1067, 1067,  543, 1067,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  557, 1067,  557,  557,  557, 1067,  557,  317, 1067,
      317,  317, 1067,  317, 1067, 1067,  317,  317, 1067,  317,
      317,  317,  318, 1067, 1067,  318, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,

      318,  318,  318,  318,  318,  331,  331, 1067,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  331,  331,  331,  331,  331,  331,  331,  331,
      331,  331,  333, 1067,  333,  333,  333,  333,  333, 1067,
     1067,  333,  333,  333,  333,  333, 1067, 1067,  333,  579,
     1067,  579, 1067,  579,  579,  579, 1067, 1067,  579,  579,
      579,  579,  579, 1067, 1067,  579,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  343, 1067,  343,  343, 1067, 1067,  343,

     1067,  343,  343,  343, 1067, 1067,  343,  341, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      341, 1067,  341,  341,  341, 1067, 1067,  341,  352,  352,
      352,  352, 1067,  352, 1067, 1067, 1067, 1067, 1067, 1067,
      352, 1067, 1067,  352, 1067, 1067,  352, 1067,  352,  352,
      352, 1067,  352,  352,  355,  355,  355,  355, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067,  355, 1067,  355,  355,
     1067, 1067,  355, 1067,  355,  355,  355, 1067, 1067,  355,
      361,  361,  361,  361, 1067,  361, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  361, 1067,

      361,  361,  361, 1067, 1067,  361,  585, 1067, 1067, 1067,
      585, 1067,  585,  585,  585, 1067, 1067,  585,  362,  362,
     1067,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  364, 1067,  364,  364,  364,
      364,  364, 1067, 1067,  364,  364,  364,  364,  364, 1067,
     1067,  364,  586, 1067,  586, 1067,  586,  586,  586, 1067,
     1067,  586,  586,  586,  586,  586, 1067, 1067,  586,  370,
      370, 1067,  370,  370,  370,  370,  370,  370,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  370,  370,

      370,  370,  370,  370,  370,  370,  372, 1067,  372,  372,
      372,  372,  372,  372, 1067,  372,  372,  372,  372,  372,
     1067, 1067,  372,  589, 1067,  589, 1067,  589,  589,  589,
     1067, 1067,  589,  589,  589,  589,  589, 1067, 1067,  589,
      384,  384,  384,  384, 1067,  384, 1067, 1067, 1067, 1067,
     1067, 1067,  384, 1067, 1067,  384, 1067, 1067,  384, 1067,
      384,  384,  384, 1067,  384,  384,  389,  389,  389,  389,
     1067, 1067,  389, 1067, 1067, 1067, 1067, 1067,  389, 1067,
      389,  389, 1067, 1067,  389, 1067,  389,  389,  389, 1067,
     1067,  389,  392,  392,  392,  392, 1067,  392, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      392, 1067,  392,  392,  392, 1067, 1067,  392,  592,  592,
      592,  592,  592,  592,  592,  592, 1067,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  594, 1067, 1067,  594, 1067,
     1067,  594, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  594,
     1067, 1067, 1067,  594, 1067,  594,  594,  594, 1067, 1067,
      594,  393, 1067, 1067,  393, 1067, 1067, 1067,  393, 1067,
      393,  393,  393, 1067, 1067,  393,  397,  397, 1067,  397,
      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,

      397,  397,  397,  397,  397,  397,  397,  397,  397,  397,
      397,  397,  397,  402,  402, 1067,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      407,  407, 1067,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  407,  407,  407,
      407,  407,  407,  407,  407,  407,  407,  409, 1067,  409,
      409,  409,  409,  409, 1067, 1067,  409,  409,  409,  409,
      409, 1067, 1067,  409,  598, 1067,  598, 1067,  598,  598,
      598, 1067, 1067,  598,  598,  598,  598,  598, 1067, 1067,

      598,  420,  420,  420,  420, 1067,  420, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067,  420,  420, 1067, 1067,  420,
     1067,  420,  420,  420, 1067, 1067,  420,  601, 1067,  601,
      601,  601, 1067, 1067,  601,  604,  604,  604,  604, 1067,
      604, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  604,
      604, 1067, 1067,  604, 1067,  604,  604,  604, 1067, 1067,
      604,  428,  428,  428,  428, 1067,  428, 1067, 1067, 1067,
     1067, 1067, 1067,  428, 1067, 1067,  428, 1067, 1067,  428,
     1067,  428,  428,  428, 1067,  428,  428,  431,  431,  431,
      431, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  431,

     1067,  431,  431, 1067, 1067,  431, 1067,  431,  431,  431,
     1067, 1067,  431,  437,  437,  437,  437, 1067,  437, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067,  437, 1067,  437,  437,  437, 1067, 1067,  437,  607,
     1067, 1067, 1067,  607, 1067,  607,  607,  607, 1067, 1067,
      607,  440, 1067,  440, 1067, 1067, 1067,  440, 1067,  440,
      440,  440, 1067, 1067,  440,  609, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  609, 1067,
      609,  609,  609, 1067, 1067,  609,  444,  444, 1067,  444,
     1067, 1067, 1067,  444, 1067,  444,  444,  444, 1067, 1067,

      444,  449,  449, 1067,  449,  449,  449,  449,  449,  449,
     1067,  449,  449,  449,  449,  449,  449,  449,  449,  449,
      449, 1067,  449,  449,  449,  449,  449,  449,  453, 1067,
     1067,  453, 1067, 1067, 1067,  453, 1067,  453,  453,  453,
     1067, 1067,  453,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      455, 1067,  455,  455,  455,  455,  455,  455,  455,  455,
      457,  457, 1067,  457,  457,  457,  457,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  457, 1067,  457,
      457,  457,  457,  457,  457,  457,  457,  616, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      616, 1067,  616,  616,  616, 1067, 1067,  616,  464, 1067,
     1067,  464, 1067, 1067, 1067,  464, 1067,  464,  464,  464,
     1067, 1067,  464,  468,  468, 1067,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      468,  468,  468,  468,  468,  468,  468,  468,  468,  468,
      471,  471, 1067,  471, 1067,  471,  471,  471,  471, 1067,
      471,  471,  471,  471, 1067,  471,  471,  471, 1067,  471,
     1067,  471,  471,  471,  471,  471,  471,  479, 1067, 1067,
      479, 1067, 1067, 1067,  479, 1067,  479,  479,  479, 1067,

     1067,  479,  487,  487, 1067,  487, 1067,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  487,  487,  487,  487,
     1067,  487, 1067,  487,  487,  487,  487,  487,  487,  491,
      491, 1067,  491, 1067,  491,  491,  491,  491,  491,  491,
      491,  491,  491,  491,  491,  491,  491, 1067,  491, 1067,
      491,  491,  491,  491,  491,  491,  500, 1067, 1067,  500,
     1067, 1067, 1067,  500, 1067,  500,  500,  500, 1067, 1067,
      500,  504,  504, 1067,  504,  504,  504,  504, 1067, 1067,
      504,  504,  504,  504,  504,  504,  504,  504,  504, 1067,
      504, 1067,  504,  504,  504,  504,  504,  504,  513, 1067,

      513,  513, 1067, 1067,  513, 1067,  513,  513,  513, 1067,
     1067,  513,  511, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067,  511, 1067,  511,  511,  511,
     1067, 1067,  511,  518, 1067,  518,  518, 1067, 1067,  518,
     1067,  518,  518,  518, 1067, 1067,  518,  516, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      516, 1067,  516,  516,  516, 1067, 1067,  516,  521,  521,
     1067,  521,  521,  521,  521,  521,  521,  521,  521,  521,
      521,  521,  521,  521,  521,  521, 1067,  521, 1067,  521,
      521,  521,  521,  521,  521,  524, 1067, 1067,  524, 1067,

     1067, 1067,  524, 1067,  524,  524,  524, 1067, 1067,  524,
      526,  526, 1067,  526,  526,  526,  526,  526,  526,  526,
      526,  526, 1067,  526,  526,  526,  526,  526,  526,  526,
     1067,  526,  526,  526,  526,  526,  526,  529,  529, 1067,
      529,  529,  529,  529,  529,  529, 1067,  529,  529,  529,
      529,  529,  529,  529,  529, 1067,  529, 1067,  529,  529,
      529,  529,  529,  529,  532, 1067, 1067,  532, 1067, 1067,
     1067,  532, 1067,  532,  532,  532, 1067, 1067,  532,  536,
      536, 1067, 1067,  536, 1067,  536,  536,  536, 1067, 1067,
      536,  655,  655, 1067,  655,  655,  655, 1067,  655,  655,

      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  538,  538,
     1067,  538, 1067, 1067, 1067,  538, 1067,  538,  538,  538,
      286, 1067,  286,  286, 1067,  286, 1067, 1067,  286,  286,
     1067,  286,  286,  286,  543, 1067, 1067,  543, 1067,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  543,  543,
      543,  662,  662, 1067,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  557, 1067,

     1067,  557, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067,  557, 1067,  557,  557,
      557,  306, 1067, 1067,  306, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  306,
     1067,  306,  306,  306,  673,  673, 1067,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673, 1067,  673,
      673,  318, 1067, 1067,  318, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  318,
      318,  318,  318,  318,  579, 1067,  579,  579,  579,  579,

      579, 1067, 1067,  579,  579,  579,  579,  579, 1067, 1067,
      579,  333, 1067,  333,  333,  333,  333,  333, 1067, 1067,
      333,  333,  333,  333,  333, 1067, 1067,  333,  341, 1067,
      341,  341,  341, 1067, 1067,  341,  585, 1067, 1067, 1067,
      585, 1067,  585,  585,  585, 1067, 1067,  585,  586, 1067,
      586,  586,  586,  586,  586, 1067, 1067,  586,  586,  586,
      586,  586, 1067, 1067,  586,  364, 1067,  364,  364,  364,
      364,  364, 1067, 1067,  364,  364,  364,  364,  364, 1067,
     1067,  364,  589, 1067,  589,  589,  589,  589,  589,  589,
     1067,  589,  589,  589,  589,  589, 1067, 1067,  589,  372,

     1067,  372,  372,  372,  372,  372,  372, 1067,  372,  372,
      372,  372,  372, 1067, 1067,  372,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
      592,  592,  592,  594, 1067, 1067,  594, 1067, 1067,  594,
     1067, 1067, 1067, 1067, 1067, 1067, 1067,  594, 1067, 1067,
     1067,  594, 1067,  594,  594,  594, 1067, 1067,  594,  598,
     1067,  598,  598,  598,  598,  598, 1067, 1067,  598,  598,
      598,  598,  598, 1067, 1067,  598,  409, 1067,  409,  409,
      409,  409,  409, 1067, 1067,  409,  409,  409,  409,  409,

     1067, 1067,  409,  697,  697,  697,  697, 1067,  697, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067,  697,  697, 1067,
     1067,  697, 1067,  697,  697,  697, 1067, 1067,  697,  601,
      601,  601,  601, 1067,  601, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067,  601, 1067, 1067,  601, 1067,  601,
      601,  601, 1067, 1067,  601,  604,  604,  604,  604, 1067,
      604, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  604,
      604, 1067, 1067,  604, 1067,  604,  604,  604, 1067, 1067,
      604,  607, 1067, 1067, 1067,  607, 1067,  607,  607,  607,
     1067, 1067,  607,  609, 1067,  609,  609,  609, 1067, 1067,

      609,  701, 1067,  701, 1067, 1067, 1067,  701, 1067,  701,
      701,  701, 1067, 1067,  701,  616, 1067,  616,  616,  616,
     1067, 1067,  616,  707, 1067, 1067, 1067,  707, 1067,  707,
      707,  707, 1067, 1067,  707,  718,  718,  718,  718,  718,
      718,  718,  718,  718,  718,  718,  718,  718,  718,  718,
     1067,  718,  718,  718, 1067,  718, 1067, 1067,  718,  718,
      718,  718,  511, 1067,  511,  511,  511, 1067, 1067,  511,
      516, 1067,  516,  516,  516, 1067, 1067,  516,  655,  655,
     1067,  655,  655,  655,  655,  655,  655,  655,  655,  655,
      655,  655,  655,  655,  655,  655,  655,  655,  655,  655,

      655,  655,  655,  655,  655,  741, 1067, 1067,  741, 1067,
     1067, 1067,  741, 1067,  741,  741,  741,  291, 1067,  291,
     1067,  291,  291, 1067,  291, 1067, 1067,  291,  291, 1067,
      291,  291,  291,  662,  662, 1067,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
      306, 1067, 1067,  306, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,  306, 1067,
      306,  306,  306,  673,  673, 1067,  673,  673,  673,  673,
      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,

      673,  673,  673,  673,  673,  673,  673,  673,  673,  673,
      677,  677,  677,  677,  677,  318, 1067, 1067,  318, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067,  318,  318,  318,  318,  318,  333, 1067,
      333,  333,  333,  333,  333, 1067, 1067,  333,  333,  333,
      333,  333, 1067, 1067,  333,  364, 1067,  364,  364,  364,
      364,  364, 1067, 1067,  364,  364,  364,  364,  364, 1067,
     1067,  364,  372, 1067,  372,  372,  372,  372,  372,  372,
     1067,  372,  372,  372,  372,  372, 1067, 1067,  372,  769,
     1067,  769,  769,  769, 1067, 1067,  769,  813,  813, 1067,

      813, 1067, 1067, 1067,  813, 1067,  813,  813,  813,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749, 1067,  749,
     1067, 1067, 1067,  749,  749,  749,  836,  836,  836,  836,
     1067,  836, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
      836,  836, 1067, 1067,  836, 1067,  836,  836,  836, 1067,
     1067,  836,  860,  860,  860,  860,  860,  860,  860,  860,
      860,  860,  860,  860,  860,  860,  860, 1067,  860,  860,
      860, 1067,  860, 1067,  860, 1067,  860,  860,  860,  926,
      926,  926,  926,  926,  926,  926,  926,  926,  926,  926,

      926,  926,  926,  926, 1067,  926,  926,  926, 1067,  926,
     1067, 1067, 1067,  926,  926,  926,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927, 1067,  927,  927,  927, 1067,  927, 1067, 1067, 1067,
      927,  927,  927,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976, 1067,  976,
      976,  976, 1067,  976, 1067, 1067, 1067,  976,  976,  976,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  986,
      986,  986,  986,  986,  986, 1067,  986,  986,  986, 1067,
      986, 1067, 1067, 1067,  986,  986,  986,   81, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067
    } ;

static yyconst flex_int16_t yy_chk[7667] =
    {   0,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    4,   21,
       22,    4,   23,   21,   22,   24,   23,   47,   48,   24,
     1061,    4,    4,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,   57,    5,   58,    5,    5,

      300,   35,    5,    5,    5,    5,   21,   22,   36,   23,
       35, 1057,   24,  207,   47,   48,  108,   36,  207,  300,
      108,    5,    5,    5,   43,   43,  488,   43,  488,   43,
       44,   44,   57,   44,   58,   44,   51,   51,   35,   51,
       52,   52,   63,   52,   64,   36, 1054,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,   43,    6,   39,    6,    6,   40,   44,    6,
        6,    6,    6,   39,   51,   53,   40,   53,   52,   63,
      527,   64,  100,  100,   39,  271,  100,   40,    6,    6,
        6,  111,  111,  111,  111,   53,  527,   92, 1050,   92,

       92,   39,   92,   92,   40,  111,  100,   92,  197,  111,
      271,  197,   53,  197,    6,    6,    6,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   75,   13,  305,   13,   13,
       76,  188,   13,   13,   13,   13,   45,   75,   45,   54,
      188,   54,   76,  222,  248,   45,  305,  222,  248,  223,
       45,   13,   13,   13,  223,   46,   45,   46,  223,   54,

       85,   85,   75,   85,   46, 1047,  253,   76,  188,   46,
      253,  294,  294,   45,   69,   46,   54,   13,   13,   13,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   46,   14,   69,   14,   14,   70,   85,   14,
       14,   14,   14,   55,   56,   55,   56,  292,  101,  101,
      292,   69,  101,  112,  112,  112,  112,   70,   14,   14,
       14, 1046,   61,   55,   56,  109,  109,  112,  109,   61,
       61,  112,  101,  341,   70,  117,  117,  341,  117,  343,
       55,   56,   61,  343,   14,   14,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   61,

       15,   71,   15,   15,   62,  109,   15,   15,   15,   15,
       72,   62,   62,   77, 1045,  117,  118,  118,  118,  118,
      312,   71,   77,  118,   62,   15,   15,   15,   84,  312,
       72,   84,  511,   77,  216,  216,  511,  216,   71,  144,
      144,   62,  144,  328,  328,  557,  328,   72,  557,   84,
       77,   15,   15,   15,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   84,   16,   78,   16,
       16, 1064,  216,   16,   16,   16,   16,   78,   89,  144,
       89,   89,   89,   89,  116,  116,  116,  116,   78, 1064,
       89,  227,   16,   16,   16,  227,  295, 1052,  116,  796,

      513,  227,  116,  227,  513,   78,  796,   89,  140,  140,
      140,  140, 1052,  329,  329,  140,  329,  295,   16,   16,
       16,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   25,   25, 1028,
       25,   94,   25,   25,   94, 1044,   25,   25,   25,   25,
      148,  148, 1028,  148,   94,   94,  113,  113,  113,  113,
      122,  122,   94,  113,  122,   25,   25,   25,  102,  102,

      113,  102,  152,  152,  113,  152, 1042,  336,  336,   94,
      336,  311,  102,  102,  122,  516,  102, 1042, 1040,  516,
      148,   25,   25,   25,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,  102,   26,  102,   26,
       26,  311,  152,   26,   26,   26,   26,   96,   96, 1039,
       96,  113,  495,  123,  123, 1037,   96,  123,   96,   96,
       96,   96,   26,   26,   26,  297,  495,  311,   96,  134,
      134,  134,  134,  172,  172,  172,  172,  123,  345,  345,
      172,  345, 1011,  134, 1011,   96,  297,  134,   26,   26,
       26,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,

       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       37,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
       41,   41,   41,   41,   41,   41,   41,   41,   41,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   65,   65,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   90,  114,  114,
      114,  114, 1036,  129,  129,  114,  296,  129,   90,  129,
      156,  156,  114, 1035,  156, 1034,  114,  318,   90,  298,
      318,   90,   90,  296, 1033,   90,   90,  129,   90,   90,
     1032,  518,  130,  130,  156,  518,  130,   90,  130,  301,
      298,   90,   90,  125,  125,  296,  125,   90,   90,   90,
       90,   90,   90,   91,   91,  318,  130,  125,  125,  523,
      301,  125,  131,  114, 1031,  228,   91,   91,   91, 1024,
      228,  131,  131,  653,  228,  131,  334,  131,  550,  334,
      228,  125,  228,  125,  523,   91, 1023,  356,  356,   91,

      356,   91,   91,   91, 1021,  131,  157,  157,  550,  334,
      157,  133,  133,  653,  133,   91,  163,  163,   91,  163,
       91,   91,   91,   93,   93,  133,  133, 1020,  784,  133,
      157,  133,  135,  135,  135,  135,   93,   93,   93,  653,
      136,  136,  136,  136,  784,  392,  135,  136,  392,  133,
      135,  133, 1019,  392,  136,   93,  163,   93,  136,   93,
      455,   93,   93,   93, 1018,  137,  137,  137,  137,  455,
      171,  171,  137,  171,  276,   93, 1017,  276,   93,  137,
       93,   93,   93,  137,  139,  139,  139,  139,  367,  367,
      553,  367,  139,  158,  158,  276,  158,  455,  139,  800,

     1016,  664,  139,  279,  279,  136,  279,  158,  158,  553,
      171,  158,  276,  800,  165,  165,  165,  165,  162,  162,
      162,  162,  664, 1015, 1014,  162,  177,  177,  165,  177,
      137,  158,  165,  158,  162,  162,  162,  166,  166,  166,
      166,  279,  167,  167,  167,  167,  554,  377,  377,  167,
      377,  166, 1005, 1004,  466,  166,  167,  466,  992,  466,
      167,  168,  168,  168,  168,  554,  177,  746,  168,  170,
      170,  170,  170,  180,  180,  168,  180,  183,  183,  168,
      183,  991,  989,  170,  191,  191,  746,  170,  210,  210,
     1062,  210,  214,  214, 1062,  214,  988,  191,  191,  191,

      231,  231,  560,  231,  982,  560,  981,  167,  235,  235,
      980,  235,  562,  180,  979,  562,  191,  183,  241,  241,
      978,  241,  244,  244,  630,  244,  168,  630,  210,  977,
      280,  280,  214,  280,  558,  299,  319,  558,  299,  319,
      231,  558,  950,  191,  192,  192,  549,  192,  235,  549,
      192,  192,  949, 1059,  320,  299,  321,  320,  241,  321,
     1059,  948,  244,  192,  192,  192,  549,  562,  280,  299,
      317,  558,  317,  317,  319,  317,  317,  630,  322,  947,
      317,  322,  192,  323,  192,  569,  323,  319,  569,  946,
      323,  299,  320,  561,  321,  325,  561,  558,  325,  324,

      945,  321,  324,  333,  333,  326,  944,  333,  326,  192,
      277,  277,  943,  320,  394,  394,  322,  394,  326,  326,
      323,  323,  942,  277,  277,  277,  326,  333,  335,  335,
      569,  322,  335,  325,  941,  338,  338,  324,  567,  338,
      561,  567,  277,  326,  324,  551,  323,  940,  551,  277,
      277,  325,  335,  324,  365,  399,  399,  365,  399,  338,
      348,  348,  348,  348,  939,  551,  938,  277,  277,  277,
      278,  278,  338,  648,  348,  937,  648,  365,  348,  353,
      353,  353,  353,  278,  278,  278,  353,  936,  935,  349,
      349,  349,  349,  934,  933,  567,  349,  351,  351,  351,

      351,  932,  278,  349,  351,  404,  404,  349,  404,  278,
      278,  351,  931,  929,  928,  351,  359,  359,  359,  359,
      924,  412,  412,  359,  412,  923,  922,  278,  278,  278,
      290,  421,  421,  290,  421,  290,  290,  290,  290,  290,
      290,  290,  290,  290,  290,  290,  290,  921,  920,  290,
      290,  290,  290,  373,  349,  919,  373,  352,  352,  352,
      352,  918,  351,  355,  355,  355,  355,  917,  290,  290,
      290,  352,  916,  915,  913,  352,  373,  355,  364,  364,
      658,  355,  364,  658,  912,  354,  354,  354,  354,  911,
      432,  432,  354,  432,  290,  290,  290,  290,  306,  354,

      910,  306,  364,  354,  306,  306,  360,  360,  360,  360,
      366,  366,  663,  360,  366,  663,  909,  306,  306,  306,
      369,  369,  372,  372,  369,  908,  372,  907,  372,  374,
      374,  906,  663,  374,  366,  374,  306,  380,  380,  380,
      380,  379,  379,  905,  369,  379,  372,  379,  409,  409,
      354,  380,  409,  374,  904,  380,  410,  369,  902,  410,
      901,  306,  306,  306,  900,  379,  381,  381,  381,  381,
      897,  896,  409,  381,  383,  383,  383,  383,  379,  410,
      381,  383,  411,  411,  381,  887,  411,  667,  383,  886,
      667,  885,  383,  384,  384,  384,  384,  385,  385,  385,

      385,  384,  441,  441,  385,  441,  411,  384,  884,  883,
      882,  384,  386,  386,  386,  386,  881,  880,  879,  386,
      387,  387,  387,  387,  446,  446,  386,  446,  387,  878,
      386,  381,  414,  414,  387,  877,  414,  876,  387,  383,
      389,  389,  389,  389,  390,  390,  390,  390,  389,  450,
      450,  390,  450,  875,  389,  874,  414,  873,  389,  391,
      391,  391,  391,  872,  461,  461,  391,  461,  871,  414,
      870,  415,  415,  415,  415,  869,  868,  386,  415,  416,
      416,  416,  416,  418,  418,  418,  418,  415,  415,  415,
      418,  420,  420,  420,  420,  866,  864,  416,  420,  418,

      418,  418,  424,  424,  424,  424,  861,  420,  420,  420,
      425,  425,  425,  425,  859,  858,  424,  425,  476,  476,
      424,  476,  480,  480,  425,  480,  857,  856,  425,  427,
      427,  427,  427,  855,  854,  853,  427,  428,  428,  428,
      428,  483,  483,  427,  483,  497,  497,  427,  497,  501,
      501,  428,  501,  852,  851,  428,  429,  429,  429,  429,
      850,  849,  848,  429,  430,  430,  430,  430,  847,  505,
      505,  430,  505,  508,  508,  425,  508,  563,  430,  483,
      563,  846,  430,  431,  431,  431,  431,  845,  435,  435,
      435,  435,  844,  574,  427,  435,  574,  431,  843,  842,

      841,  431,  436,  436,  436,  436,  839,  838,  593,  436,
      568,  593,  837,  568,  833,  572,  593,  575,  572,  573,
      575,  563,  573,  672,  576,  735,  672,  576,  735,  430,
      542,  574,  832,  542,  831,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  828,  574,  542,
      542,  542,  542,  572,  568,  575,  750,  573,  827,  750,
      577,  575,  576,  577,  572,  817,  573,  816,  542,  542,
      542,  578,  672,  815,  578,  579,  579,  671,  814,  579,
      671,  576,  580,  580,  581,  581,  580,  813,  581,  586,
      586,  812,  811,  586,  542,  542,  542,  542,  577,  579,

      674,  587,  587,  674,  577,  587,  580,  810,  581,  578,
      588,  588,  594,  586,  588,  594,  578,  589,  589,  581,
      594,  589,  809,  589,  808,  587,  590,  590,  676,  807,
      590,  676,  590,  671,  588,  684,  591,  591,  684,  806,
      591,  589,  591,  598,  598,  588,  805,  598,  599,  599,
      590,  804,  599,  600,  600,  803,  751,  600,  674,  751,
      591,  802,  601,  601,  601,  601,  801,  598,  799,  601,
      798,  591,  599,  684,  676,  797,  795,  600,  601,  601,
      601,  684,  602,  602,  602,  602,  794,  793,  600,  602,
      603,  603,  603,  603,  792,  867,  990,  603,  867,  990,

      602,  751,  604,  604,  604,  604,  603,  603,  603,  604,
      657,  791,  657, 1038,  657,  657, 1038,  790,  604,  604,
      604,  789,  657,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  670,  670,  670,  670,  670,  670,  670,  670,  670,
      670,  675,  681,  678,  675,  681,  678,  818,  685,  685,

      818,  788,  685,  888,  688,  688,  888,  787,  688,  696,
      696,  696,  696,  786,  819,  785,  696,  819,  821,  783,
      752,  821,  685,  752,  782,  696,  696,  696,  688,  781,
      681,  678,  680,  682,  780,  680,  682,  685,  779,  683,
      818,  681,  683,  688,  888,  675,  678,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      679,  679,  679,  679,  679,  679,  679,  679,  679,  679,
      680,  682,  819,  752,  778,  777,  821,  683,  689,  689,
      952,  776,  689,  952,  689,  679,  679,  679,  680,  754,
      775,  682,  754,  683,  694,  694,  889,  890,  694,  889,

      890,  774,  689,  697,  697,  697,  697,  773,  772,  771,
      697,  679,  679,  679,  679,  770,  767,  689,  694,  697,
      697,  697,  698,  698,  698,  698,  711,  711,  766,  698,
      765,  711,  762,  694,  711,  711,  952,  761,  754,  711,
      698,  889,  890,  711,  711,  742,  753,  742,  755,  742,
      742,  755,  748, 1049,  760,  760, 1049,  742,  760,  769,
      769,  769,  769,  747, 1051, 1055,  769, 1051, 1055,  953,
     1058, 1060,  953, 1058, 1060,  769,  769,  769,  760,  757,
      759,  745,  757,  759,  758,  760,  755,  758,  822,  891,
      744,  822,  891,  755,  756,  756,  756,  756,  756,  756,

      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  757,  759,  763,
      763,  953,  758,  763,  757,  823,  822,  891,  823,  759,
      822,  741,  756,  756,  756,  739,  738,  758,  764,  764,
      737,  736,  764,  763,  764,  891,  824,  768,  768,  824,
      763,  768,  825,  826,  826,  825,  734,  826,  756,  756,
      756,  756,  764,  823,  892,  733,  732,  892,  823,  764,
      731,  768,  829,  829,  730,  729,  829,  826,  768,  830,
      830,  826,  728,  830,  824,  830, 1063,  834,  834, 1063,
      825,  834,  893,  727, 1008,  893,  829, 1008,  894,  726,

      829,  894,  892,  830,  824,  892,  951,  830,  725,  951,
      825,  834,  724,  723,  721,  834,  835,  835,  835,  835,
      720,  719,  717,  835,  836,  836,  836,  836,  716,  715,
      893,  836,  835,  835,  835,  957,  894,  893,  957, 1008,
      836,  836,  836,  894,  895,  895,  898,  898,  895,  714,
      898,  899,  899,  954,  954,  899,  954,  899,  903,  903,
      955,  713,  903,  955,  951,  712,  956,  710,  895,  956,
      898, 1009,  709,  957, 1009,  899,  708,  958,  958,  961,
      961,  958,  903,  961,  706,  705,  895,  957,  898, 1010,
     1010,  954, 1010,  899, 1012,  966,  966, 1012,  955,  966,

      903,  958,  704,  961,  956,  962,  962, 1013,  703,  962,
     1013,  962, 1026, 1027, 1029, 1026, 1027, 1029,  955,  966,
      702,  701,  956, 1030, 1009, 1041, 1030, 1010, 1041,  962,
     1043, 1053, 1012, 1043, 1053, 1066, 1066,  700, 1066, 1012,
     1154,  699, 1154, 1154, 1154, 1013, 1215,  693,  692, 1215,
     1215,  691, 1029,  687, 1027,  686, 1026,  677, 1029,  673,
     1013, 1030,  666, 1224, 1030, 1224, 1224, 1224, 1043, 1053,
      665,  662,  661, 1066,  660, 1227, 1041, 1227, 1227, 1227,
      655, 1043, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068,

     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070,
     1070, 1070, 1070, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071, 1071,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,

     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1073, 1073, 1073, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
     1074, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075,
     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1076, 1076,

     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
     1076, 1076, 1076, 1076, 1076, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1078, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079, 1079,

     1079, 1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081, 1081,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,

     1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1084, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
     1086, 1086, 1086, 1086, 1086, 1087, 1087, 1087, 1087, 1087,

     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087, 1087,
     1087, 1087, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1088, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1089, 1090, 1090,  654, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090,

     1090, 1090, 1090, 1091, 1228,  652, 1228, 1228, 1228, 1253,
      651,  649, 1253, 1253,  647,  646, 1091,  642, 1091, 1091,
     1091,  640,  638, 1091, 1092,  637, 1092, 1092,  636, 1092,
      635,  634, 1092, 1092,  633, 1092, 1092, 1092, 1093,  632,
     1093, 1093, 1093, 1093,  631, 1093,  629,  628, 1093, 1093,
     1093, 1093, 1093, 1093, 1094, 1094, 1258,  627, 1258, 1258,
     1258,  626,  625,  624,  623,  622, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1095,  621, 1095, 1095,  620,
     1095,  619,  618, 1095, 1095,  617, 1095, 1095, 1095, 1096,
     1096,  614,  613,  612,  611,  610,  609,  606,  605,  597,

      596, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
     1097, 1097,  595, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097, 1097,
     1097, 1097, 1097, 1097, 1097, 1097, 1097, 1098,  592, 1098,
     1098, 1098, 1098, 1098,  584,  583, 1098, 1098, 1098, 1098,
     1098,  556,  555, 1098, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099, 1099,
     1099, 1100,  548, 1100, 1100, 1100,  547,  546, 1100, 1101,
      544, 1101, 1101,  543,  541, 1101,  538, 1101, 1101, 1101,

      536,  535, 1101, 1102, 1102, 1102, 1102,  534, 1102,  533,
      531,  528,  525,  522,  520, 1102,  519,  517, 1102,  515,
      514, 1102,  512, 1102, 1102, 1102,  510, 1102, 1102, 1103,
     1103, 1103, 1103,  507,  503,  499,  496,  494,  493,  492,
      490, 1103,  489, 1103, 1103,  486,  485, 1103,  482, 1103,
     1103, 1103,  478,  475, 1103, 1104, 1104, 1104, 1104,  474,
     1104,  470,  468,  467,  465,  463,  460,  458,  457,  454,
      452,  448,  445, 1104,  444, 1104, 1104, 1104,  443,  440,
     1104, 1105, 1105,  439, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,

     1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1106,  438,
     1106, 1106, 1106, 1106, 1106,  434,  426, 1106, 1106, 1106,
     1106, 1106,  423,  419, 1106, 1107, 1107,  407, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107,
     1107, 1107, 1108,  406, 1108, 1108, 1108, 1108, 1108, 1108,
      402, 1108, 1108, 1108, 1108, 1108,  401,  397, 1108, 1109,
     1109, 1109, 1109,  396, 1109,  382,  376,  371,  370,  362,
      358, 1109,  350,  347, 1109,  344,  342, 1109,  339, 1109,
     1109, 1109,  331, 1109, 1109, 1110, 1110, 1110, 1110,  313,

      310, 1110,  309,  308,  307,  303,  302, 1110,  293, 1110,
     1110,  291,  286, 1110,  285, 1110, 1110, 1110,  282,  281,
     1110, 1111, 1111, 1111, 1111,  275, 1111,  270,  266,  265,
      262,  258,  257,  254,  249,  218,  206,  205,  204, 1111,
      200, 1111, 1111, 1111,  199,  195, 1111, 1112,  190,  187,
     1112,  179,  176,  169, 1112,  155, 1112, 1112, 1112,  151,
      147, 1112, 1113, 1113,  138, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1113, 1114,
     1114,  128, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,

     1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1114, 1114, 1114, 1114, 1115, 1115,  124, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1115, 1115, 1116,  121, 1116, 1116, 1116, 1116, 1116,
      115,  103, 1116, 1116, 1116, 1116, 1116,   99,   95, 1116,
     1117,   88, 1117, 1117, 1117,   87,   86, 1117, 1118, 1118,
     1118, 1118,   81, 1118,    8,    7,    0,    0,    0,    0,
        0,    0, 1118, 1118,    0,    0, 1118,    0, 1118, 1118,
     1118,    0,    0, 1118, 1119, 1119, 1119, 1119,    0, 1119,

        0,    0,    0,    0,    0,    0, 1119,    0,    0, 1119,
        0,    0, 1119,    0, 1119, 1119, 1119,    0, 1119, 1119,
     1120, 1120, 1120, 1120,    0,    0,    0,    0,    0,    0,
        0,    0, 1120,    0, 1120, 1120,    0,    0, 1120,    0,
     1120, 1120, 1120,    0,    0, 1120, 1121, 1121, 1121, 1121,
        0, 1121,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1121,    0, 1121, 1121, 1121,    0,
        0, 1121, 1122,    0, 1122, 1122, 1122,    0,    0, 1122,
     1123,    0, 1123,    0,    0,    0, 1123,    0, 1123, 1123,
     1123,    0,    0, 1123, 1124, 1124,    0, 1124,    0,    0,

        0, 1124,    0, 1124, 1124, 1124,    0,    0, 1124, 1125,
     1125,    0, 1125, 1125, 1125, 1125, 1125, 1125,    0, 1125,
     1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125, 1125,    0,
     1125, 1125, 1125, 1125, 1125, 1125, 1126,    0,    0, 1126,
        0,    0,    0, 1126,    0, 1126, 1126, 1126,    0,    0,
     1126, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127,    0,
     1127, 1127, 1127, 1127, 1127, 1127, 1127, 1127, 1128, 1128,
        0, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1128, 1128, 1128, 1128, 1128,    0, 1128, 1128, 1128,

     1128, 1128, 1128, 1128, 1128, 1129,    0,    0, 1129,    0,
        0,    0, 1129,    0, 1129, 1129, 1129,    0,    0, 1129,
     1130, 1130,    0, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131, 1131,    0,
     1131,    0, 1131, 1131, 1131, 1131,    0, 1131, 1131, 1131,
     1131,    0, 1131, 1131, 1131,    0, 1131,    0, 1131, 1131,
     1131, 1131, 1131, 1131, 1132,    0,    0, 1132,    0,    0,
        0, 1132,    0, 1132, 1132, 1132,    0,    0, 1132, 1133,
     1133,    0, 1133,    0, 1133, 1133, 1133, 1133, 1133, 1133,

     1133, 1133, 1133, 1133, 1133, 1133, 1133,    0, 1133,    0,
     1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134,    0, 1134,
        0, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134,    0, 1134,    0, 1134, 1134, 1134,
     1134, 1134, 1134, 1135,    0,    0, 1135,    0,    0,    0,
     1135,    0, 1135, 1135, 1135,    0,    0, 1135, 1136, 1136,
        0, 1136, 1136, 1136, 1136,    0,    0, 1136, 1136, 1136,
     1136, 1136, 1136, 1136, 1136, 1136,    0, 1136,    0, 1136,
     1136, 1136, 1136, 1136, 1136, 1137,    0, 1137, 1137, 1137,
        0,    0, 1137, 1138,    0, 1138, 1138,    0,    0, 1138,

        0, 1138, 1138, 1138,    0,    0, 1138, 1139,    0, 1139,
     1139, 1139,    0,    0, 1139, 1140,    0, 1140, 1140,    0,
        0, 1140,    0, 1140, 1140, 1140,    0,    0, 1140, 1141,
     1141,    0, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141,    0, 1141,    0,
     1141, 1141, 1141, 1141, 1141, 1141, 1142,    0,    0, 1142,
        0,    0,    0, 1142,    0, 1142, 1142, 1142,    0,    0,
     1142, 1143, 1143,    0, 1143, 1143, 1143, 1143, 1143, 1143,
     1143, 1143, 1143,    0, 1143, 1143, 1143, 1143, 1143, 1143,
     1143,    0, 1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144,

        0, 1144, 1144, 1144, 1144, 1144, 1144,    0, 1144, 1144,
     1144, 1144, 1144, 1144, 1144, 1144,    0, 1144,    0, 1144,
     1144, 1144, 1144, 1144, 1144, 1145,    0,    0, 1145,    0,
        0,    0, 1145,    0, 1145, 1145, 1145,    0,    0, 1145,
     1146, 1146,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0, 1146, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1147, 1147,    0, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1147, 1147, 1147, 1147, 1147, 1147, 1148,    0,
     1148, 1148, 1148,    0,    0, 1148, 1149, 1149,    0,    0,

     1149,    0, 1149, 1149, 1149,    0,    0, 1149, 1150,    0,
     1150, 1150,    0, 1150,    0,    0, 1150, 1150,    0, 1150,
     1150, 1150, 1151,    0,    0, 1151,    0,    0,    0, 1151,
        0, 1151, 1151, 1151, 1152,    0,    0, 1152,    0, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1153,    0, 1153, 1153, 1153,    0, 1153, 1155,    0,
     1155, 1155,    0, 1155,    0,    0, 1155, 1155,    0, 1155,
     1155, 1155, 1156,    0,    0, 1156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

     1156, 1156, 1156, 1156, 1156, 1157, 1157,    0, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157, 1157,
     1157, 1157, 1158,    0, 1158, 1158, 1158, 1158, 1158,    0,
        0, 1158, 1158, 1158, 1158, 1158,    0,    0, 1158, 1159,
        0, 1159,    0, 1159, 1159, 1159,    0,    0, 1159, 1159,
     1159, 1159, 1159,    0,    0, 1159, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1160, 1161,    0, 1161, 1161,    0,    0, 1161,

        0, 1161, 1161, 1161,    0,    0, 1161, 1162,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1162,    0, 1162, 1162, 1162,    0,    0, 1162, 1163, 1163,
     1163, 1163,    0, 1163,    0,    0,    0,    0,    0,    0,
     1163,    0,    0, 1163,    0,    0, 1163,    0, 1163, 1163,
     1163,    0, 1163, 1163, 1164, 1164, 1164, 1164,    0,    0,
        0,    0,    0,    0,    0,    0, 1164,    0, 1164, 1164,
        0,    0, 1164,    0, 1164, 1164, 1164,    0,    0, 1164,
     1165, 1165, 1165, 1165,    0, 1165,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1165,    0,

     1165, 1165, 1165,    0,    0, 1165, 1166,    0,    0,    0,
     1166,    0, 1166, 1166, 1166,    0,    0, 1166, 1167, 1167,
        0, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1168,    0, 1168, 1168, 1168,
     1168, 1168,    0,    0, 1168, 1168, 1168, 1168, 1168,    0,
        0, 1168, 1169,    0, 1169,    0, 1169, 1169, 1169,    0,
        0, 1169, 1169, 1169, 1169, 1169,    0,    0, 1169, 1170,
     1170,    0, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170,

     1170, 1170, 1170, 1170, 1170, 1170, 1171,    0, 1171, 1171,
     1171, 1171, 1171, 1171,    0, 1171, 1171, 1171, 1171, 1171,
        0,    0, 1171, 1172,    0, 1172,    0, 1172, 1172, 1172,
        0,    0, 1172, 1172, 1172, 1172, 1172,    0,    0, 1172,
     1173, 1173, 1173, 1173,    0, 1173,    0,    0,    0,    0,
        0,    0, 1173,    0,    0, 1173,    0,    0, 1173,    0,
     1173, 1173, 1173,    0, 1173, 1173, 1174, 1174, 1174, 1174,
        0,    0, 1174,    0,    0,    0,    0,    0, 1174,    0,
     1174, 1174,    0,    0, 1174,    0, 1174, 1174, 1174,    0,
        0, 1174, 1175, 1175, 1175, 1175,    0, 1175,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1175,    0, 1175, 1175, 1175,    0,    0, 1175, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176,    0, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1177,    0,    0, 1177,    0,
        0, 1177,    0,    0,    0,    0,    0,    0,    0, 1177,
        0,    0,    0, 1177,    0, 1177, 1177, 1177,    0,    0,
     1177, 1178,    0,    0, 1178,    0,    0,    0, 1178,    0,
     1178, 1178, 1178,    0,    0, 1178, 1179, 1179,    0, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1180, 1180,    0, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1181, 1181,    0, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1181, 1182,    0, 1182,
     1182, 1182, 1182, 1182,    0,    0, 1182, 1182, 1182, 1182,
     1182,    0,    0, 1182, 1183,    0, 1183,    0, 1183, 1183,
     1183,    0,    0, 1183, 1183, 1183, 1183, 1183,    0,    0,

     1183, 1184, 1184, 1184, 1184,    0, 1184,    0,    0,    0,
        0,    0,    0,    0,    0, 1184, 1184,    0,    0, 1184,
        0, 1184, 1184, 1184,    0,    0, 1184, 1185,    0, 1185,
     1185, 1185,    0,    0, 1185, 1186, 1186, 1186, 1186,    0,
     1186,    0,    0,    0,    0,    0,    0,    0,    0, 1186,
     1186,    0,    0, 1186,    0, 1186, 1186, 1186,    0,    0,
     1186, 1187, 1187, 1187, 1187,    0, 1187,    0,    0,    0,
        0,    0,    0, 1187,    0,    0, 1187,    0,    0, 1187,
        0, 1187, 1187, 1187,    0, 1187, 1187, 1188, 1188, 1188,
     1188,    0,    0,    0,    0,    0,    0,    0,    0, 1188,

        0, 1188, 1188,    0,    0, 1188,    0, 1188, 1188, 1188,
        0,    0, 1188, 1189, 1189, 1189, 1189,    0, 1189,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0, 1189,    0, 1189, 1189, 1189,    0,    0, 1189, 1190,
        0,    0,    0, 1190,    0, 1190, 1190, 1190,    0,    0,
     1190, 1191,    0, 1191,    0,    0,    0, 1191,    0, 1191,
     1191, 1191,    0,    0, 1191, 1192,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1192,    0,
     1192, 1192, 1192,    0,    0, 1192, 1193, 1193,    0, 1193,
        0,    0,    0, 1193,    0, 1193, 1193, 1193,    0,    0,

     1193, 1194, 1194,    0, 1194, 1194, 1194, 1194, 1194, 1194,
        0, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
     1194,    0, 1194, 1194, 1194, 1194, 1194, 1194, 1195,    0,
        0, 1195,    0,    0,    0, 1195,    0, 1195, 1195, 1195,
        0,    0, 1195, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1196,    0, 1196, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
     1197, 1197,    0, 1197, 1197, 1197, 1197, 1197, 1197, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1197,    0, 1197,
     1197, 1197, 1197, 1197, 1197, 1197, 1197, 1198,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1198,    0, 1198, 1198, 1198,    0,    0, 1198, 1199,    0,
        0, 1199,    0,    0,    0, 1199,    0, 1199, 1199, 1199,
        0,    0, 1199, 1200, 1200,    0, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200,
     1201, 1201,    0, 1201,    0, 1201, 1201, 1201, 1201,    0,
     1201, 1201, 1201, 1201,    0, 1201, 1201, 1201,    0, 1201,
        0, 1201, 1201, 1201, 1201, 1201, 1201, 1202,    0,    0,
     1202,    0,    0,    0, 1202,    0, 1202, 1202, 1202,    0,

        0, 1202, 1203, 1203,    0, 1203,    0, 1203, 1203, 1203,
     1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203, 1203,
        0, 1203,    0, 1203, 1203, 1203, 1203, 1203, 1203, 1204,
     1204,    0, 1204,    0, 1204, 1204, 1204, 1204, 1204, 1204,
     1204, 1204, 1204, 1204, 1204, 1204, 1204,    0, 1204,    0,
     1204, 1204, 1204, 1204, 1204, 1204, 1205,    0,    0, 1205,
        0,    0,    0, 1205,    0, 1205, 1205, 1205,    0,    0,
     1205, 1206, 1206,    0, 1206, 1206, 1206, 1206,    0,    0,
     1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206, 1206,    0,
     1206,    0, 1206, 1206, 1206, 1206, 1206, 1206, 1207,    0,

     1207, 1207,    0,    0, 1207,    0, 1207, 1207, 1207,    0,
        0, 1207, 1208,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0, 1208,    0, 1208, 1208, 1208,
        0,    0, 1208, 1209,    0, 1209, 1209,    0,    0, 1209,
        0, 1209, 1209, 1209,    0,    0, 1209, 1210,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1210,    0, 1210, 1210, 1210,    0,    0, 1210, 1211, 1211,
        0, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211, 1211,
     1211, 1211, 1211, 1211, 1211, 1211,    0, 1211,    0, 1211,
     1211, 1211, 1211, 1211, 1211, 1212,    0,    0, 1212,    0,

        0,    0, 1212,    0, 1212, 1212, 1212,    0,    0, 1212,
     1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
     1213, 1213,    0, 1213, 1213, 1213, 1213, 1213, 1213, 1213,
        0, 1213, 1213, 1213, 1213, 1213, 1213, 1214, 1214,    0,
     1214, 1214, 1214, 1214, 1214, 1214,    0, 1214, 1214, 1214,
     1214, 1214, 1214, 1214, 1214,    0, 1214,    0, 1214, 1214,
     1214, 1214, 1214, 1214, 1216,    0,    0, 1216,    0,    0,
        0, 1216,    0, 1216, 1216, 1216,    0,    0, 1216, 1217,
     1217,    0,    0, 1217,    0, 1217, 1217, 1217,    0,    0,
     1217, 1218, 1218,    0, 1218, 1218, 1218,    0, 1218, 1218,

     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218,
     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1218, 1219, 1219,
        0, 1219,    0,    0,    0, 1219,    0, 1219, 1219, 1219,
     1220,    0, 1220, 1220,    0, 1220,    0,    0, 1220, 1220,
        0, 1220, 1220, 1220, 1221,    0,    0, 1221,    0, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221, 1221,
     1221, 1222, 1222,    0, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1223,    0,

        0, 1223,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0, 1223,    0, 1223, 1223,
     1223, 1225,    0,    0, 1225,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1225,
        0, 1225, 1225, 1225, 1226, 1226,    0, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
     1226, 1226, 1226, 1226, 1226, 1226, 1226, 1226,    0, 1226,
     1226, 1229,    0,    0, 1229,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1229,
     1229, 1229, 1229, 1229, 1230,    0, 1230, 1230, 1230, 1230,

     1230,    0,    0, 1230, 1230, 1230, 1230, 1230,    0,    0,
     1230, 1231,    0, 1231, 1231, 1231, 1231, 1231,    0,    0,
     1231, 1231, 1231, 1231, 1231,    0,    0, 1231, 1232,    0,
     1232, 1232, 1232,    0,    0, 1232, 1233,    0,    0,    0,
     1233,    0, 1233, 1233, 1233,    0,    0, 1233, 1234,    0,
     1234, 1234, 1234, 1234, 1234,    0,    0, 1234, 1234, 1234,
     1234, 1234,    0,    0, 1234, 1235,    0, 1235, 1235, 1235,
     1235, 1235,    0,    0, 1235, 1235, 1235, 1235, 1235,    0,
        0, 1235, 1236,    0, 1236, 1236, 1236, 1236, 1236, 1236,
        0, 1236, 1236, 1236, 1236, 1236,    0,    0, 1236, 1237,

        0, 1237, 1237, 1237, 1237, 1237, 1237,    0, 1237, 1237,
     1237, 1237, 1237,    0,    0, 1237, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238, 1238,
     1238, 1238, 1238, 1239,    0,    0, 1239,    0,    0, 1239,
        0,    0,    0,    0,    0,    0,    0, 1239,    0,    0,
        0, 1239,    0, 1239, 1239, 1239,    0,    0, 1239, 1240,
        0, 1240, 1240, 1240, 1240, 1240,    0,    0, 1240, 1240,
     1240, 1240, 1240,    0,    0, 1240, 1241,    0, 1241, 1241,
     1241, 1241, 1241,    0,    0, 1241, 1241, 1241, 1241, 1241,

        0,    0, 1241, 1242, 1242, 1242, 1242,    0, 1242,    0,
        0,    0,    0,    0,    0,    0,    0, 1242, 1242,    0,
        0, 1242,    0, 1242, 1242, 1242,    0,    0, 1242, 1243,
     1243, 1243, 1243,    0, 1243,    0,    0,    0,    0,    0,
        0,    0,    0,    0, 1243,    0,    0, 1243,    0, 1243,
     1243, 1243,    0,    0, 1243, 1244, 1244, 1244, 1244,    0,
     1244,    0,    0,    0,    0,    0,    0,    0,    0, 1244,
     1244,    0,    0, 1244,    0, 1244, 1244, 1244,    0,    0,
     1244, 1245,    0,    0,    0, 1245,    0, 1245, 1245, 1245,
        0,    0, 1245, 1246,    0, 1246, 1246, 1246,    0,    0,

     1246, 1247,    0, 1247,    0,    0,    0, 1247,    0, 1247,
     1247, 1247,    0,    0, 1247, 1248,    0, 1248, 1248, 1248,
        0,    0, 1248, 1249,    0,    0,    0, 1249,    0, 1249,
     1249, 1249,    0,    0, 1249, 1250, 1250, 1250, 1250, 1250,
     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250,
        0, 1250, 1250, 1250,    0, 1250,    0,    0, 1250, 1250,
     1250, 1250, 1251,    0, 1251, 1251, 1251,    0,    0, 1251,
     1252,    0, 1252, 1252, 1252,    0,    0, 1252, 1254, 1254,
        0, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1255,    0,    0, 1255,    0,
        0,    0, 1255,    0, 1255, 1255, 1255, 1256,    0, 1256,
        0, 1256, 1256,    0, 1256,    0,    0, 1256, 1256,    0,
     1256, 1256, 1256, 1257, 1257,    0, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257, 1257,
     1259,    0,    0, 1259,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0, 1259,    0,
     1259, 1259, 1259, 1260, 1260,    0, 1260, 1260, 1260, 1260,
     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,

     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260,
     1261, 1261, 1261, 1261, 1261, 1262,    0,    0, 1262,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0, 1262, 1262, 1262, 1262, 1262, 1263,    0,
     1263, 1263, 1263, 1263, 1263,    0,    0, 1263, 1263, 1263,
     1263, 1263,    0,    0, 1263, 1264,    0, 1264, 1264, 1264,
     1264, 1264,    0,    0, 1264, 1264, 1264, 1264, 1264,    0,
        0, 1264, 1265,    0, 1265, 1265, 1265, 1265, 1265, 1265,
        0, 1265, 1265, 1265, 1265, 1265,    0,    0, 1265, 1266,
        0, 1266, 1266, 1266,    0,    0, 1266, 1267, 1267,    0,

     1267,    0,    0,    0, 1267,    0, 1267, 1267, 1267, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,
     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1268,    0, 1268,
        0,    0,    0, 1268, 1268, 1268, 1269, 1269, 1269, 1269,
        0, 1269,    0,    0,    0,    0,    0,    0,    0,    0,
     1269, 1269,    0,    0, 1269,    0, 1269, 1269, 1269,    0,
        0, 1269, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270,
     1270, 1270, 1270, 1270, 1270, 1270, 1270,    0, 1270, 1270,
     1270,    0, 1270,    0, 1270,    0, 1270, 1270, 1270, 1271,
     1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271, 1271,

     1271, 1271, 1271, 1271,    0, 1271, 1271, 1271,    0, 1271,
        0,    0,    0, 1271, 1271, 1271, 1272, 1272, 1272, 1272,
     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
     1272,    0, 1272, 1272, 1272,    0, 1272,    0,    0,    0,
     1272, 1272, 1272, 1273, 1273, 1273, 1273, 1273, 1273, 1273,
     1273, 1273, 1273, 1273, 1273, 1273, 1273, 1273,    0, 1273,
     1273, 1273,    0, 1273,    0,    0,    0, 1273, 1273, 1273,
     1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
     1274, 1274, 1274, 1274, 1274,    0, 1274, 1274, 1274,    0,
     1274,    0,    0,    0, 1274, 1274, 1274, 1067, 1067, 1067,

     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1067, 1067, 1067, 1067, 1067, 1067
    } ;

extern int commentScanYY_flex_debug;
int commentScanYY_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *commentScanYYtext;
#line 1 "commentscan.l"
/*****************************************************************************
 *
 * Copyright (C) 1997-2011 by Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */
#line 17 "commentscan.l"

/*
 *	includes
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <ctype.h>

#include "qtbc.h"
#include <qarray.h>
#include <qstack.h>
#include <qregexp.h>
#include <unistd.h>
#include <qfile.h>
  
#include "scanner.h"
#include "entry.h"
#include "doxygen.h"
#include "message.h"
#include "config.h"
#include "util.h"
#include "index.h"
#include "defargs.h"
#include "language.h"
#include "outputlist.h"
#include "membergroup.h"
#include "reflist.h"
#include "debug.h"
#include "parserintf.h"
#include "cite.h"

// forward declarations
static bool handleBrief(const QCString &);
static bool handleFn(const QCString &);
static bool handleDef(const QCString &);
static bool handleOverload(const QCString &);
static bool handleEnum(const QCString &);
static bool handleDefGroup(const QCString &);
static bool handleAddToGroup(const QCString &);
static bool handleWeakGroup(const QCString &);
static bool handleNamespace(const QCString &);
static bool handlePackage(const QCString &);
static bool handleClass(const QCString &);
static bool handleHeaderFile(const QCString &);
static bool handleProtocol(const QCString &);
static bool handleCategory(const QCString &);
static bool handleUnion(const QCString &);
static bool handleStruct(const QCString &);
static bool handleInterface(const QCString &);
static bool handleIdlException(const QCString &);
static bool handlePage(const QCString &);
static bool handleMainpage(const QCString &);
static bool handleFile(const QCString &);
static bool handleDir(const QCString &);
static bool handleExample(const QCString &);
static bool handleDetails(const QCString &);
static bool handleName(const QCString &);
static bool handleTodo(const QCString &);
static bool handleTest(const QCString &);
static bool handleBug(const QCString &);
static bool handleSubpage(const QCString &s);
static bool handleDeprecated(const QCString &);
static bool handleXRefItem(const QCString &);
static bool handleRelated(const QCString &);
static bool handleRelatedAlso(const QCString &);
static bool handleMemberOf(const QCString &);
static bool handleRefItem(const QCString &);
static bool handleSection(const QCString &);
static bool handleAnchor(const QCString &);
static bool handleCite(const QCString &);
static bool handleFormatBlock(const QCString &);
static bool handleAddIndex(const QCString &);
static bool handleIf(const QCString &);
static bool handleIfNot(const QCString &);
static bool handleElseIf(const QCString &);
static bool handleElse(const QCString &);
static bool handleEndIf(const QCString &);
static bool handleIngroup(const QCString &);
static bool handleNoSubGrouping(const QCString &);
static bool handleShowInitializer(const QCString &);
static bool handleHideInitializer(const QCString &);
static bool handleCallgraph(const QCString &);
static bool handleCallergraph(const QCString &);
static bool handleInternal(const QCString &);
static bool handleLineBr(const QCString &);
static bool handleStatic(const QCString &);
static bool handlePure(const QCString &);
static bool handlePrivate(const QCString &);
static bool handlePrivateSection(const QCString &);
static bool handleProtected(const QCString &);
static bool handleProtectedSection(const QCString &);
static bool handlePublic(const QCString &s);
static bool handlePublicSection(const QCString &s);
static bool handleInherit(const QCString &);
static bool handleExtends(const QCString &);

typedef bool (*DocCmdFunc)(const QCString &name);

struct DocCmdMap
{
  const char *cmdName;
  DocCmdFunc handler;
  bool endsBrief;
};

// map of command to handler function
static DocCmdMap docCmdMap[] =
{
  // command name      handler function         ends brief description
  { "brief",           &handleBrief,            FALSE },
  { "short",           &handleBrief,            FALSE },
  { "fn",              &handleFn,               FALSE },
  { "var",             &handleFn,               FALSE },
  { "typedef",         &handleFn,               FALSE },
  { "property",        &handleFn,               FALSE },
  { "def",             &handleDef,              FALSE },
  { "overload",        &handleOverload,         FALSE },
  { "enum",            &handleEnum,             FALSE },
  { "defgroup",        &handleDefGroup,         FALSE },
  { "addtogroup",      &handleAddToGroup,       FALSE },
  { "weakgroup",       &handleWeakGroup,        FALSE },
  { "namespace",       &handleNamespace,        FALSE },
  { "package",         &handlePackage,          FALSE },
  { "class",           &handleClass,            FALSE },
  { "headerfile",      &handleHeaderFile,       FALSE },
  { "protocol",        &handleProtocol,         FALSE },
  { "category",        &handleCategory,         FALSE },
  { "union",           &handleUnion,            FALSE },
  { "struct",          &handleStruct,           FALSE },
  { "interface",       &handleInterface,        FALSE },
  { "idlexcept",       &handleIdlException,     FALSE },
  { "page",            &handlePage,             FALSE },
  { "mainpage",        &handleMainpage,         FALSE },
  { "file",            &handleFile,             FALSE },
  { "dir",             &handleDir,              FALSE },
  { "example",         &handleExample,          FALSE },
  { "details",         &handleDetails,          TRUE  },
  { "name",            &handleName,             FALSE },
  { "todo",            &handleTodo,             FALSE }, // end brief will be done differently
  { "test",            &handleTest,             FALSE }, // end brief will be done differently
  { "bug",             &handleBug,              FALSE }, // end brief will be done differently
  { "deprecated",      &handleDeprecated,       FALSE }, // end brief will be done differently
  { "xrefitem",        &handleXRefItem,         FALSE }, // end brief will be done differently
  { "related",         &handleRelated,          TRUE  },
  { "relates",         &handleRelated,          TRUE  },
  { "relatedalso",     &handleRelatedAlso,      TRUE  },
  { "relatesalso",     &handleRelatedAlso,      TRUE  },
  { "refitem",         &handleRefItem,          TRUE  },
  { "cite",            &handleCite,             TRUE  },
  { "subpage",         &handleSubpage,          TRUE  },
  { "section",         &handleSection,          TRUE  },
  { "subsection",      &handleSection,          TRUE  },
  { "subsubsection",   &handleSection,          TRUE  },
  { "paragraph",       &handleSection,          TRUE  },
  { "anchor",          &handleAnchor,           TRUE  },
  { "verbatim",        &handleFormatBlock,      TRUE },
  { "latexonly",       &handleFormatBlock,      FALSE },
  { "htmlonly",        &handleFormatBlock,      FALSE },
  { "xmlonly",         &handleFormatBlock,      FALSE },
  { "rtfonly",         &handleFormatBlock,      FALSE },
  { "manonly",         &handleFormatBlock,      FALSE },
  { "dot",             &handleFormatBlock,      TRUE  },
  { "msc",             &handleFormatBlock,      TRUE  },
  { "code",            &handleFormatBlock,      TRUE  },
  { "addindex",        &handleAddIndex,         FALSE },
  { "if",              &handleIf,               FALSE },
  { "ifnot",           &handleIfNot,            FALSE },
  { "elseif",          &handleElseIf,           FALSE },
  { "else",            &handleElse,             FALSE },
  { "endif",           &handleEndIf,            FALSE },
  { "ingroup",         &handleIngroup,          FALSE },
  { "nosubgrouping",   &handleNoSubGrouping,    FALSE },
  { "showinitializer", &handleShowInitializer,  FALSE },
  { "hideinitializer", &handleHideInitializer,  FALSE },
  { "callgraph",       &handleCallgraph,        FALSE },
  { "callergraph",     &handleCallergraph,      FALSE },
  { "internal",        &handleInternal,         TRUE  },
  { "_linebr",         &handleLineBr,           FALSE },
  { "static",          &handleStatic,           FALSE },
  { "pure",            &handlePure,             FALSE },
  { "private",         &handlePrivate,          FALSE },
  { "privatesection",  &handlePrivateSection,   FALSE },
  { "protected",       &handleProtected,        FALSE },
  { "protectedsection",&handleProtectedSection, FALSE },
  { "public",          &handlePublic,           FALSE },
  { "publicsection",   &handlePublicSection,    FALSE },
  { "inherit",         &handleInherit,          TRUE  },
  { "extends",         &handleExtends,          TRUE  },
  { "implements",      &handleExtends,          TRUE  },
  { "memberof",        &handleMemberOf,         TRUE  },
  { "arg",             0,                       TRUE  },
  { "attention",       0,                       TRUE  },
  { "author",          0,                       TRUE  },
  { "authors",         0,                       TRUE  },
  { "copydoc",         0,                       TRUE  },
  { "copybrief",       0,                       FALSE },
  { "copydetails",     0,                       TRUE  },
  { "date",            0,                       TRUE  },
  { "dotfile",         0,                       TRUE  },
  { "htmlinclude",     0,                       FALSE },
  { "image",           0,                       TRUE  },
  { "include",         0,                       TRUE  },
  { "includelineno",   0,                       TRUE  },
  { "invariant",       0,                       TRUE  },
  { "li",              0,                       TRUE  },
  { "line",            0,                       TRUE  },
  { "note",            0,                       TRUE  },
  { "par",             0,                       TRUE  },
  { "param",           0,                       TRUE  },
  { "tparam",          0,                       TRUE  },
  { "post",            0,                       TRUE  },
  { "pre",             0,                       TRUE  },
  { "remark",          0,                       TRUE  },
  { "remarks",         0,                       TRUE  },
  { "result",          0,                       TRUE  },
  { "return",          0,                       TRUE  },
  { "returns",         0,                       TRUE  },
  { "retval",          0,                       TRUE  },
  { "sa",              0,                       TRUE  },
  { "see",             0,                       TRUE  },
  { "since",           0,                       TRUE  },
  { "throw",           0,                       TRUE  },
  { "throws",          0,                       TRUE  },
  { "until",           0,                       TRUE  },
  { "verbinclude",     0,                       FALSE },
  { "version",         0,                       TRUE  },
  { "warning",         0,                       TRUE  },
  { 0, 0, FALSE }
};

/** @brief Command mapper.
 *
 *  Maps a command name (as found in a comment block) onto a
 *  specific handler function.
 */
class DocCmdMapper
{
  public:
    struct Cmd
    {
      DocCmdFunc func;
      bool endsBrief;
    };

    /** maps a command name to a handler function */
    static Cmd *map(const char *name)
    {
      return instance()->find(name);
    }

    /** release the singleton */
    static void freeInstance()
    {
      delete s_instance; s_instance=0;
    }

  private:
    static DocCmdMapper *instance()
    {
      if (s_instance==0) s_instance = new DocCmdMapper;
      return s_instance;
    }

    DocCmdMapper() : m_map(113)
    {
      m_map.setAutoDelete(TRUE);
      DocCmdMap *p = docCmdMap;
      while (p->cmdName)
      {
	if (m_map.find(p->cmdName)!=0)
	{
	  printf("Error: DocCmdMapper: command %s already added\n",p->cmdName);
	  exit(1);
	}
	Cmd *cmd = new Cmd;
	cmd->func = p->handler;
	cmd->endsBrief = p->endsBrief;
	m_map.insert(p->cmdName,cmd);
	p++;
      }
    }

    Cmd *find(const char *name)
    {
      return m_map.find(name);
    }
    QDict<Cmd> m_map;
    static DocCmdMapper *s_instance;
};

DocCmdMapper *DocCmdMapper::s_instance=0;
  
  
#define YY_NEVER_INTERACTIVE 1

enum XRefKind
{
  XRef_Item,
  XRef_Todo,
  XRef_Test,
  XRef_Bug,
  XRef_Deprecated,
  XRef_None
};

enum OutputContext
{
  OutputDoc,
  OutputBrief,
  OutputXRef,
  OutputInbody
};

enum GuardType
{
  Guard_If,
  Guard_IfNot,
  Guard_Skip
};

class GuardedSection
{
  public:
    GuardedSection(bool enabled,bool parentVisible) 
      : m_enabled(enabled),m_parentVisible(parentVisible) {}
    bool isEnabled() const { return m_enabled; }
    bool parentVisible() const { return m_parentVisible; }
  
  private:
    bool m_enabled;
    bool m_parentVisible;
};

void openGroup(Entry *e,const char *file,int line);
void closeGroup(Entry *e,const char *file,int line,bool foundInline=FALSE);
void initGroupInfo(Entry *e);
static void groupAddDocs(Entry *e,const char *fileName);

/* -----------------------------------------------------------------
 *
 *	statics
 */

static ParserInterface *langParser;          // the language parser that is calling us
static QCString         inputString;         // input string
static int		inputPosition;       // read pointer
static QCString		yyFileName;          // file name that is read from
static int		yyLineNr;            // line number in the input
static bool             inBody;              // was the comment found inside the body of a function?
static OutputContext    inContext;           // are we inside the brief, details or xref part
static bool             briefEndsAtDot;      // does the brief description stop at a dot?
static QCString         formulaText;         // Running text of a formula
static QCString         formulaEnv;          // environment name
static int              formulaNewLines;     // amount of new lines in the formula
static QCString        *pOutputString;       // pointer to string to which the output is appended.
static QCString         outputXRef;          // temp argument of todo/test/../xrefitem commands
static QCString         blockName;           // preformatted block name (e.g. verbatim, latexonly,...)
static XRefKind         xrefKind;            // kind of cross-reference command
static XRefKind         newXRefKind;         // 
static GuardType        guardType;           // kind of guard for conditional section
static bool             enabledSectionFound;
static QCString         functionProto;       // function prototype
static QStack<GuardedSection> guards;        // tracks nested conditional sections (if,ifnot,..)
static Entry*		current      = 0 ;   // working entry
//static Entry*		current_root = 0 ;   // parent of working entry


//static Entry*		previous     = 0 ;   // TODO: remove need for this
static bool             needNewEntry;

static QCString         sectionLabel;
static QCString		sectionTitle;
static QCString         xrefItemKey;
static QCString         newXRefItemKey;
static QCString         xrefItemTitle;
static QCString         xrefListTitle;
static Protection	protection;

static bool             xrefAppendFlag;
static bool             inGroupParamFound;
static int              braceCount;
static bool             insidePre;
static bool             parseMore;
static int              g_condCount;
static int              g_sectionLevel;

static int              g_commentCount;

//-----------------------------------------------------------------------------

static QStack<Grouping> g_autoGroupStack;
static int              g_memberGroupId = DOX_NOGROUP;
static QCString         g_memberGroupHeader;
static QCString         g_memberGroupDocs;
static QCString         g_memberGroupRelates;
static QCString         g_compoundName;

//-----------------------------------------------------------------------------

static void initParser()
{
  sectionLabel.resize(0);
  sectionTitle.resize(0);
  g_memberGroupHeader.resize(0);
}

//-----------------------------------------------------------------------------

static QCString getDocSectionName(int s)
{
  switch(s)
  {
    case Entry::CLASSDOC_SEC:       return "\\class";
    case Entry::STRUCTDOC_SEC:      return "\\struct";
    case Entry::UNIONDOC_SEC:       return "\\union";
    case Entry::EXCEPTIONDOC_SEC:   return "\\exception";
    case Entry::NAMESPACEDOC_SEC:   return "\\namespace";
    case Entry::PROTOCOLDOC_SEC:    return "\\protocol";
    case Entry::CATEGORYDOC_SEC:    return "\\category";
    case Entry::ENUMDOC_SEC:        return "\\enum";
    case Entry::PAGEDOC_SEC:        return "\\page";
    case Entry::VARIABLEDOC_SEC:    return "\\var";
    case Entry::MEMBERDOC_SEC:      return "\\fn";
    case Entry::OVERLOADDOC_SEC:    return "\\overload";
    case Entry::FILEDOC_SEC:        return "\\file";
    case Entry::DEFINEDOC_SEC:      return "\\def";
    case Entry::GROUPDOC_SEC:       return "\\defgroup";
    case Entry::MAINPAGEDOC_SEC:    return "\\mainpage";
    case Entry::PACKAGEDOC_SEC:     return "\\package";
    case Entry::DIRDOC_SEC:         return "\\dir";
    case Entry::EXAMPLE_SEC:        return "\\example";
    case Entry::MEMBERGRP_SEC:      return "\\name";
    default: return "";
  }
}

//-----------------------------------------------------------------------------

static bool makeStructuralIndicator(Entry::Sections s)
{
  //printf("current->section=%x\n",current->section);
  if (!getDocSectionName(current->section).isEmpty())
  {
    return TRUE;
  }
  else
  {
    needNewEntry = TRUE;
    current->section = s;
    current->fileName = yyFileName;
    current->startLine = yyLineNr;
    return FALSE;
  }
}

static void lineCount()
{
  for( const char* c = commentScanYYtext ; *c ; ++c )
    yyLineNr += (*c == '\n') ;
}


static QCString stripQuotes(const char *s)
{
  QCString name;
  if (s==0 || *s==0) return name;
  name=s;
  if (name.at(0)=='"' && name.at(name.length()-1)=='"')
  {
    name=name.mid(1,name.length()-2);
  }
  return name;
}

//-----------------------------------------------------------------

static void addXRefItem(const char *listName,const char *itemTitle,
                        const char *listTitle,bool append)
{
  Entry *docEntry = current; // inBody && previous ? previous : current;
  if (listName==0) return;
  //printf("addXRefItem(%s,%s,%s,%d)\n",listName,itemTitle,listTitle,append);

  ListItemInfo *lii=0;
  RefList *refList = Doxygen::xrefLists->find(listName);
  if (refList==0) // new list
  {
    refList = new RefList(listName,listTitle,itemTitle);
    Doxygen::xrefLists->insert(listName,refList);
    //printf("new list!\n");
  }
  if (docEntry->sli)
  {
    QListIterator<ListItemInfo> slii(*docEntry->sli);
    for (slii.toFirst();(lii=slii.current());++slii)
    {
      if (strcmp(lii->type,listName)==0) 
      {
        //printf("found %s lii->type=%s\n",listName,lii->type);
        break;
      }
    }
  }
  if (lii && append) // already found item of same type just before this one
  {
    //printf("listName=%s item id = %d existing\n",listName,lii->itemId);
    RefItem *item = refList->getRefItem(lii->itemId);
    ASSERT(item!=0);
    item->text += " <p>";
    item->text += outputXRef;
    //printf("%s: text +=%s\n",listName,item->text.data());
  }
  else // new item
  {
    int itemId  = refList->addRefItem();
    //printf("listName=%s item id = %d new current=%p\n",listName,itemId,current);

    // if we have already an item from the same list type (e.g. a second @todo)
    // in the same Entry (i.e. lii!=0) then we reuse its link anchor.
    char anchorLabel[1024];
    //sprintf(anchorLabel,"_%s%06d",listName,lii ? lii->itemId : itemId);
    sprintf(anchorLabel,"_%s%06d",listName,itemId);
    RefItem *item = refList->getRefItem(itemId);
    ASSERT(item!=0);
    item->text = outputXRef;
    item->listAnchor = anchorLabel;
    docEntry->addSpecialListItem(listName,itemId);
    QCString cmdString;
    cmdString.sprintf("\\xrefitem %s %d.",listName,itemId);
    if (inBody)
    {
      docEntry->inbodyDocs += cmdString;
    }
    else
    {
      docEntry->doc += cmdString;
    }
    SectionInfo *si=new SectionInfo(listName,anchorLabel,
	                            sectionTitle,SectionInfo::Anchor);
    Doxygen::sectionDict.insert(anchorLabel,si);
    docEntry->anchors->append(si);
  }
  outputXRef.resize(0);
}

//-----------------------------------------------------------------------------

// Adds a formula text to the list/dictionary of formulas if it was
// not already added. Returns the label of the formula.
static QCString addFormula()
{
  QCString formLabel;
  QCString fText=formulaText.simplifyWhiteSpace();
  Formula *f=0;
  if ((f=Doxygen::formulaDict[fText])==0)
  {
    f = new Formula(fText);
    Doxygen::formulaList.append(f);
    Doxygen::formulaDict.insert(fText,f);
    formLabel.sprintf("\\form#%d",f->getId());
    Doxygen::formulaNameDict.insert(formLabel,f);
  }
  else
  {
    formLabel.sprintf("\\form#%d",f->getId());
  }
  int i;
  for (i=0;i<formulaNewLines;i++) formLabel+="\\_fakenl"; // add fake newlines to
                                                          // keep the warnings 
                                                          // correctly aligned.
  return formLabel;
}

//-----------------------------------------------------------------------------

static void checkFormula();
//-----------------------------------------------------------------------------

static void addSection()
{
  sectionTitle+=commentScanYYtext;
  sectionTitle=sectionTitle.stripWhiteSpace();
  //printf("Adding new section file=%s label=%s title=%s\n",yyFileName,sectionLabel.data(),sectionTitle.data()); 
  SectionInfo *si = new SectionInfo(yyFileName,sectionLabel,sectionTitle,SectionInfo::Anchor);
  current->anchors->append(si);
  Doxygen::sectionDict.insert(commentScanYYtext,si);
}

//-----------------------------------------------------------------------------

static void addCite()
{
  Doxygen::citeDict->insert(commentScanYYtext);
}

//-----------------------------------------------------------------------------

// strip trailing whitespace (excluding newlines) from string s
static void stripTrailingWhiteSpace(QCString &s)
{
  uint len = s.length();
  int i = (int)len-1;
  char c;
  while (i>=0 && ((c = s.at(i))==' ' || c=='\t' || c=='\r')) i--;
  if (i!=(int)len-1) 
  {
    s.resize(i+2); // string upto and including char at pos i and \0 terminator
  }
}

// selects the output to write to
static inline void setOutput(OutputContext ctx)
{
  bool xrefAppendToPrev = xrefAppendFlag;
  // determine append flag for the next item (i.e. the end of this item)
  xrefAppendFlag = !inBody &&
                   inContext==OutputXRef && ctx==OutputXRef && // two consecutive xref items
                   newXRefKind==xrefKind &&                    // of the same kind
                   (xrefKind!=XRef_Item || 
		    newXRefItemKey==xrefItemKey);              // with the same key if \xrefitem
  //printf("%d && %d && %d && (%d || %d)\n",
  //                 inContext==OutputXRef,
  //                 ctx==OutputXRef,
  //                 newXRefKind==xrefKind,
  //                 xrefKind!=XRef_Item,
  //	  	     newXRefItemKey==xrefItemKey);
      
  //printf("refKind=%d newXRefKind=%d xrefAppendToPrev=%d xrefAppendFlag=%d\n",
  //   	  xrefKind,newXRefKind,xrefAppendToPrev,xrefAppendFlag);

  //printf("setOutput(inContext=%d ctx=%d)\n",inContext,ctx);
  if (inContext==OutputXRef) // end of XRef section => add the item 
  {
    // See if we can append this new xref item to the previous one.
    // We know this at the start of the next item of the same
    // type and need to remember this until the end of that item.
    switch(xrefKind)
    {
      case XRef_Todo:
	addXRefItem("todo",
	            theTranslator->trTodo(),
	            theTranslator->trTodoList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Test:
	addXRefItem("test",
	            theTranslator->trTest(),
		    theTranslator->trTestList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Bug:
	addXRefItem("bug",
	            theTranslator->trBug(),
		    theTranslator->trBugList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Deprecated:
	addXRefItem("deprecated",
	            theTranslator->trDeprecated(),
		    theTranslator->trDeprecatedList(),
		    xrefAppendToPrev
		   );
	break;
      case XRef_Item:  // user defined list
	addXRefItem(xrefItemKey,
	            xrefItemTitle,
		    xrefListTitle,
		    xrefAppendToPrev
		   );
	break;
      case XRef_None:
	ASSERT(0);
	break;
    }
  }
  xrefItemKey = newXRefItemKey;

  int oldContext = inContext;
  inContext = ctx;
  if (inContext!=OutputXRef && inBody) inContext=OutputInbody;
  switch(inContext)
  {
    case OutputDoc:
      if (oldContext!=inContext)
      {
        stripTrailingWhiteSpace(current->doc);
        if (current->docFile.isEmpty())
        {
          current->docFile = yyFileName;
          current->docLine = yyLineNr;
        }
      }
      pOutputString = &current->doc;
      break;
    case OutputBrief:
      if (oldContext!=inContext)
      {
	if (current->briefFile.isEmpty())
	{
	  current->briefFile = yyFileName;
	  current->briefLine = yyLineNr;
	}
      }
      if (current->brief.stripWhiteSpace().isEmpty()) // we only want one brief
	                                              // description even if multiple
	                                              // are given...
      {
        pOutputString = &current->brief;
      }
      else
      {
        pOutputString = &current->doc;
	inContext = OutputDoc; // need to switch to detailed docs, see bug 631380
      }
      break;
    case OutputXRef:
      pOutputString = &outputXRef;
      // first item found, so can't append to previous
      //xrefAppendFlag = FALSE;
      break;
    case OutputInbody:
      pOutputString = &current->inbodyDocs;
      break;
  }
}

// add a string to the output
static inline void addOutput(const char *s)
{
  *pOutputString+=s;
}

// add a character to the output
static inline void addOutput(char c)
{
  *pOutputString+=c;
}

static void endBrief(bool addToOutput=TRUE)
{
  if (!current->brief.stripWhiteSpace().isEmpty())
  { // only go to the detailed description if we have
    // found some brief description and not just whitespace
    briefEndsAtDot=FALSE;
    setOutput(OutputDoc);
    if (addToOutput) addOutput(commentScanYYtext);
  }
}

/* ----------------------------------------------------------------- */
#undef	YY_INPUT
#define	YY_INPUT(buf,result,max_size) result=yyread(buf,max_size);

static int prevPosition=0;

static int yyread(char *buf,int max_size)
{
    prevPosition=inputPosition;
    int c=0;
    while( c < max_size && inputString[inputPosition] )
    {
	*buf = inputString[inputPosition++] ;
	//printf("%d (%c)\n",*buf,*buf);
	c++; buf++;
    }
    return c;
}

/* start command character */
/* comment parsing states. */







































#line 3482 "<stdout>"

#define INITIAL 0
#define Comment 1
#define PageDocArg1 2
#define PageDocArg2 3
#define RelatesParam1 4
#define ClassDocArg1 5
#define ClassDocArg2 6
#define ClassDocArg3 7
#define CategoryDocArg1 8
#define XRefItemParam1 9
#define XRefItemParam2 10
#define XRefItemParam3 11
#define FileDocArg1 12
#define EnumDocArg1 13
#define NameSpaceDocArg1 14
#define PackageDocArg1 15
#define GroupDocArg1 16
#define GroupDocArg2 17
#define SectionLabel 18
#define SectionTitle 19
#define SubpageLabel 20
#define SubpageTitle 21
#define FormatBlock 22
#define LineParam 23
#define GuardParam 24
#define GuardParamEnd 25
#define SkipGuardedSection 26
#define SkipInternal 27
#define NameParam 28
#define InGroupParam 29
#define FnParam 30
#define OverloadParam 31
#define InheritParam 32
#define ExtendsParam 33
#define ReadFormulaShort 34
#define ReadFormulaLong 35
#define AnchorLabel 36
#define HtmlComment 37
#define SkipLang 38
#define CiteLabel 39

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int commentScanYYlex_destroy (void );

int commentScanYYget_debug (void );

void commentScanYYset_debug (int debug_flag  );

YY_EXTRA_TYPE commentScanYYget_extra (void );

void commentScanYYset_extra (YY_EXTRA_TYPE user_defined  );

FILE *commentScanYYget_in (void );

void commentScanYYset_in  (FILE * in_str  );

FILE *commentScanYYget_out (void );

void commentScanYYset_out  (FILE * out_str  );

yy_size_t commentScanYYget_leng (void );

char *commentScanYYget_text (void );

int commentScanYYget_lineno (void );

void commentScanYYset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int commentScanYYwrap (void );
#else
extern int commentScanYYwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 262144
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( commentScanYYtext, commentScanYYleng, 1, commentScanYYout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( commentScanYYin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( commentScanYYin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, commentScanYYin))==0 && ferror(commentScanYYin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(commentScanYYin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int commentScanYYlex (void);

#define YY_DECL int commentScanYYlex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after commentScanYYtext and commentScanYYleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( commentScanYYleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(commentScanYYtext[commentScanYYleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 876 "commentscan.l"


  /* What can happen in while parsing a comment block:
   *   commands (e.g. @page, or \page)
   *   escaped commands (e.g. @@page or \\page).
   *   formulas (e.g. \f$ \f[ \f{..)
   *   directories (e.g. \doxygen\src\)
   *   autolist end. (e.g. a dot on an otherwise empty line)
   *   newlines.
   *   end of brief description due to blank line.
   *   end of brief description due to some command (@command, or <command>).
   *   words and whitespace and other characters (#,?!, etc).
   *   grouping commands (e.g. @{ and @})
   *   language switch (e.g. \~english or \~).
   *   mail adress (e.g. dimitri@stack.nl).
   *   quoted text, such as "foo@bar"
   *   XML commands, <summary></summary><remarks></remarks>
   */

#line 3726 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)commentScanYYalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in commentScanYYlex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! commentScanYYin )
			commentScanYYin = stdin;

		if ( ! commentScanYYout )
			commentScanYYout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			commentScanYYensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
		}

		commentScanYY_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of commentScanYYtext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1068 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7598 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
goto find_rule; /* Shut up GCC warning -Wall */
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 895 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 898 "commentscan.l"
{ // escaped command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 901 "commentscan.l"
{ // mail adress
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 904 "commentscan.l"
{ // quoted text
                                          addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 907 "commentscan.l"
{ // directory (or chain of commands!)
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 910 "commentscan.l"
{ // xref command 
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
/*
<Comment>{DETAILEDCMD}/[^a-z_A-Z]*	{ // command that can end a brief description
				          briefEndsAtDot=FALSE;
				          setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
   */
case 7:
YY_RULE_SETUP
#line 927 "commentscan.l"
{ // HTML command that ends a brief description
					  setOutput(OutputDoc);
					  // continue with the same input
                                          REJECT;
					}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 932 "commentscan.l"
{ // start of a .NET XML style brief description
					  setOutput(OutputBrief);
  					}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 935 "commentscan.l"
{ // start of a .NET XML style detailed description
					  setOutput(OutputDoc);
  					}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 938 "commentscan.l"
{ // end of a brief or detailed description
  					}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 940 "commentscan.l"
{ // RCS tag which end a brief description
  					  setOutput(OutputDoc);
					  REJECT;
  					}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 944 "commentscan.l"
{ 
  					  BEGIN(HtmlComment);
					}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 947 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: found \\endinternal without matching \\internal"
                                              );
  					}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 952 "commentscan.l"
{ // potentially interesting command
                                          // the {B}* in the front was added for bug620924
  					  QCString cmdName = QCString(commentScanYYtext).stripWhiteSpace().data()+1;
					  DocCmdMapper::Cmd *cmdPtr = DocCmdMapper::map(cmdName);
					  if (cmdPtr) // special action is required
					  {
					    if (cmdPtr->endsBrief)
					    { 
					      briefEndsAtDot=FALSE;
					      // this command forces the end of brief description
					      setOutput(OutputDoc);
					    }
					    if (cmdPtr->func && cmdPtr->func(cmdName))
					    {
					      // implicit split of the comment block into two
					      // entries. Restart the next block at the start
					      // of this command.
					      parseMore=TRUE;

					      // yuk, this is probably not very portable across lex implementations, 
					      // but we need to know the position in the input buffer where this 
					      // rule matched.
					      // for flex 2.5.33+ we should use YY_CURRENT_BUFFER_LVALUE
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
					      inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
#else
					      inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf;
#endif
					      yyterminate();
					    }
					    else if (cmdPtr->func==0)
					    {
					      // command without handler, to be processed
					      // later by parsedoc.cpp
					      addOutput(commentScanYYtext);
					    }
					  }
					  else // command not relevant
					  {
					    addOutput(commentScanYYtext);
					  }
  					}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 994 "commentscan.l"
{ // escaped formula command
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 997 "commentscan.l"
{ // language switch command
                                          QCString langId = QString(commentScanYYtext).stripWhiteSpace().data()+2;
			       	          if (!langId.isEmpty() &&
					      stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)!=0)
				          { // enable language specific section
				            BEGIN(SkipLang);
				          }
  					}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 1005 "commentscan.l"
{ // start of a formula with custom environment
					  formulaText="\\begin";
					  formulaEnv=QString(commentScanYYtext).stripWhiteSpace().data()+2;
					  if (formulaEnv.at(formulaEnv.length()-1)=='{')
					  {
					    // remove trailing open brace
					    formulaEnv=formulaEnv.left(formulaEnv.length()-1);
					  }
					  formulaText+=formulaEnv;
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 1017 "commentscan.l"
{ // start of a inline formula
					  formulaText="$";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaShort);
  					}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 1022 "commentscan.l"
{ // start of a block formula
					  formulaText="\\[";
					  formulaNewLines=0;
					  BEGIN(ReadFormulaLong);
  					}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 1027 "commentscan.l"
{ // begin of a group
                                          //langParser->handleGroupStartCommand(g_memberGroupHeader);
                                          openGroup(current,yyFileName,yyLineNr);
                                        }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 1031 "commentscan.l"
{ // end of a group
                                          //langParser->handleGroupEndCommand();
                                          closeGroup(current,yyFileName,yyLineNr,TRUE);
                                          g_memberGroupHeader.resize(0);
					  parseMore=TRUE;
                                          needNewEntry = TRUE;
#if YY_FLEX_MINOR_VERSION>=5 && YY_FLEX_SUBMINOR_VERSION>=33
				          inputPosition=prevPosition + yy_bp - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + strlen(commentScanYYtext);
#else
				          inputPosition=prevPosition + yy_bp - yy_current_buffer->yy_ch_buf + strlen(commentScanYYtext);
#endif
					  yyterminate();
                                        }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 1044 "commentscan.l"
{ // escaped character
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 1047 "commentscan.l"
{ // normal word
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 24:
/* rule 24 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1050 "commentscan.l"
{ // explicit end autolist: e.g "  ."
  				          addOutput(commentScanYYtext); 
					}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 1053 "commentscan.l"
{ // start of autolist
					  if (inContext!=OutputXRef) 
					  {
					    briefEndsAtDot=FALSE;
					    setOutput(OutputDoc);
					  }
  				          addOutput(commentScanYYtext); 
  					}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 1061 "commentscan.l"
{ // . at start or in the middle of a word, or ellipsis
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 1064 "commentscan.l"
{ // . with escaped space.
  					  addOutput(commentScanYYtext[0]);
  					  addOutput(commentScanYYtext[2]);
  					}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 1068 "commentscan.l"
{ // . with comma such as "e.g.," 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 1071 "commentscan.l"
{ // ellipsis with escaped space.
  					  addOutput("... ");
  					}
	YY_BREAK
case 30:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1074 "commentscan.l"
{ // internal ellipsis 
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 31:
/* rule 31 can match eol */
YY_RULE_SETUP
#line 1077 "commentscan.l"
{ // at least one blank line (or blank line command)
					  if (inContext==OutputXRef)
					  {
					    // see bug 613024, we need to put the newlines after ending the XRef section.
					    setOutput(OutputDoc);
  					    addOutput("\n\n");
					  }
					  else if (inContext!=OutputBrief)
					  {
  					    addOutput("\n\n");
					    setOutput(OutputDoc);
					  }
					  else // inContext==OutputBrief
					  { // only go to the detailed description if we have
					    // found some brief description and not just whitespace
					    endBrief(FALSE);
					  }
  					  lineCount();
  					}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 1096 "commentscan.l"
{ // potential end of a JavaDoc style comment
  					  addOutput(*commentScanYYtext);
  					  if (briefEndsAtDot)
					  {
					    setOutput(OutputDoc);
					    briefEndsAtDot=FALSE;
					  }
  					}
	YY_BREAK
case 33:
/* rule 33 can match eol */
YY_RULE_SETUP
#line 1104 "commentscan.l"
{ // newline
  					  addOutput(*commentScanYYtext);
  					  yyLineNr++;
  					}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 1108 "commentscan.l"
{ // catch-all for anything else
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* --------------   Rules for handling HTML comments ----------- */
case 35:
YY_RULE_SETUP
#line 1115 "commentscan.l"
{ BEGIN( Comment ); }
	YY_BREAK
case 36:
/* rule 36 can match eol */
YY_RULE_SETUP
#line 1116 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 1119 "commentscan.l"
{ // ignore unimportant characters
  					}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 1121 "commentscan.l"
{ // ignore every else
  					}
	YY_BREAK
/* --------------   Rules for handling formulas ---------------- */
case 39:
YY_RULE_SETUP
#line 1126 "commentscan.l"
{ // end of inline formula
  					  formulaText+="$";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 1131 "commentscan.l"
{ // end of block formula
					  formulaText+="\\]";
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 1136 "commentscan.l"
{ // end of custom env formula
					  formulaText+="\\end";
					  formulaText+=formulaEnv;
					  addOutput(" "+addFormula());
					  BEGIN(Comment);
  					}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 1142 "commentscan.l"
{ // any non-special character
                                          formulaText+=commentScanYYtext; 
 					} 
	YY_BREAK
case 43:
/* rule 43 can match eol */
YY_RULE_SETUP
#line 1145 "commentscan.l"
{ // new line
                                          formulaNewLines++;
                                          formulaText+=*commentScanYYtext; 
					  yyLineNr++; 
					}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 1150 "commentscan.l"
{ // any othe character
                                          formulaText+=*commentScanYYtext; 
					}
	YY_BREAK
/* ------------ handle argument of enum command --------------- */
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 1156 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 1160 "commentscan.l"
{ // line continuation
  					  yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 1164 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after \\enum."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 1172 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of namespace command --------------- */
case 49:
/* rule 49 can match eol */
YY_RULE_SETUP
#line 1177 "commentscan.l"
{ // handle argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( Comment );
  					}
	YY_BREAK
case 50:
/* rule 50 can match eol */
YY_RULE_SETUP
#line 1181 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 1185 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\namespace."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 1194 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------------ handle argument of package command --------------- */
case 53:
YY_RULE_SETUP
#line 1199 "commentscan.l"
{ // handle argument
  					  current->name = commentScanYYtext;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 54:
/* rule 54 can match eol */
YY_RULE_SETUP
#line 1203 "commentscan.l"
{ // line continuation 
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 55:
/* rule 55 can match eol */
YY_RULE_SETUP
#line 1207 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\package."
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 1216 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ------ handle argument of class/struct/union command --------------- */
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 1221 "commentscan.l"
{ // first argument
  					  current->name = substitute(commentScanYYtext,".","::");
					  if (current->section==Entry::PROTOCOLDOC_SEC)
					  {
					    current->name+="-p";
					  }
					  // prepend outer scope name 
					  BEGIN( ClassDocArg2 );
					}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
#line 1230 "commentscan.l"
{
  					  current->name = substitute(commentScanYYtext,".","::");
					  BEGIN( ClassDocArg2 );
   					}
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 1234 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 60:
/* rule 60 can match eol */
YY_RULE_SETUP
#line 1238 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\%s.",YY_START==ClassDocArg1?"class":"category"
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 1247 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 1250 "commentscan.l"
{ // second argument; include file
					  current->includeFile = commentScanYYtext;
					  BEGIN( ClassDocArg3 );
					}
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 1254 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 64:
/* rule 64 can match eol */
YY_RULE_SETUP
#line 1258 "commentscan.l"
{ 
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
					}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 1263 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 1266 "commentscan.l"
{ // third argument; include file name
 					  current->includeName = commentScanYYtext;
					  BEGIN( Comment );
					}
	YY_BREAK
case 67:
/* rule 67 can match eol */
YY_RULE_SETUP
#line 1270 "commentscan.l"
{ // line continuation
                                          yyLineNr++;
					  addOutput('\n');
                                        }
	YY_BREAK
case 68:
/* rule 68 can match eol */
YY_RULE_SETUP
#line 1274 "commentscan.l"
{ 
  					  if (*commentScanYYtext=='\n') yyLineNr++;
  					  BEGIN( Comment );
					}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 1278 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of {def,add,weak}group commands --------- */
case 70:
YY_RULE_SETUP
#line 1283 "commentscan.l"
{ // group name
  					  current->name = commentScanYYtext;
					  //lastDefGroup.groupname = commentScanYYtext;
					  //lastDefGroup.pri = current->groupingPri();
  					  // the .html stuff is for Qt compatibility
					  if (current->name.right(5)==".html") 
					  {
					    current->name=current->name.left(current->name.length()-5);
					  }
					  current->type.resize(0);
					  BEGIN(GroupDocArg2);
  					}
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 1295 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 1299 "commentscan.l"
{ // missing argument!
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing group name after %s",
					       current->groupDocCmd()
                                              );
					  addOutput('\n');
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 1308 "commentscan.l"
{ // line continuation
  					  yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 1312 "commentscan.l"
{ // title (stored in type)
					  current->type += commentScanYYtext;
					  current->type = current->type.stripWhiteSpace();
  					}
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 1316 "commentscan.l"
{
                                          if ( current->groupDocType==Entry::GROUPDOC_NORMAL &&
                                               current->type.isEmpty() 
					     ) // defgroup requires second argument
					  {
  					    warn(yyFileName,yyLineNr,
                                                 "warning: missing title after "
					         "\\defgroup %s", current->name.data()
                                                );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++; 
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
/* --------- handle arguments of page/mainpage command ------------------- */
case 76:
YY_RULE_SETUP
#line 1333 "commentscan.l"
{ // first argument; page name
					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( PageDocArg2 ); 
					}
	YY_BREAK
case 77:
/* rule 77 can match eol */
YY_RULE_SETUP
#line 1337 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 78:
/* rule 78 can match eol */
YY_RULE_SETUP
#line 1340 "commentscan.l"
{
  					  warn(yyFileName,yyLineNr,
                                               "warning: missing argument after "
					       "\\page."
                                              );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 1349 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 80:
/* rule 80 can match eol */
YY_RULE_SETUP
#line 1351 "commentscan.l"
{ // second argument; page title
  				          yyLineNr++;
					  current->args = commentScanYYtext;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
/* --------- handle arguments of the file/dir/example command ------------ */
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 1360 "commentscan.l"
{ // no file name specfied
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
					}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 1365 "commentscan.l"
{ // first argument; name
  					  current->name = stripQuotes(commentScanYYtext);
					  BEGIN( Comment );
  				        }
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
#line 1369 "commentscan.l"
{ yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 1372 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* --------- handle arguments of the xrefitem command ------------ */
case 85:
YY_RULE_SETUP
#line 1377 "commentscan.l"
{ // first argument
  					  newXRefItemKey=commentScanYYtext;
                                          setOutput(OutputXRef);
					  BEGIN(XRefItemParam2);
					}
	YY_BREAK
case 86:
/* rule 86 can match eol */
YY_RULE_SETUP
#line 1382 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
                                        }
	YY_BREAK
case 87:
/* rule 87 can match eol */
YY_RULE_SETUP
#line 1386 "commentscan.l"
{ // missing arguments
  					  warn(yyFileName,yyLineNr,
					       "warning: Missing first argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 1395 "commentscan.l"
{ // ignore other stuff 
  					}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 1398 "commentscan.l"
{ // second argument
  					  xrefItemTitle = stripQuotes(commentScanYYtext);
					  BEGIN(XRefItemParam3);
  					}
	YY_BREAK
case 90:
/* rule 90 can match eol */
YY_RULE_SETUP
#line 1402 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
#line 1406 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing second argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 1415 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 1418 "commentscan.l"
{ // third argument
  					  xrefListTitle = stripQuotes(commentScanYYtext);
                                          xrefKind = XRef_Item;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 94:
/* rule 94 can match eol */
YY_RULE_SETUP
#line 1423 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 95:
/* rule 95 can match eol */
YY_RULE_SETUP
#line 1427 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing third argument of \\xrefitem"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  inContext = OutputDoc;
					  BEGIN( Comment );
  					}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 1436 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/memberof command ------- */
case 97:
YY_RULE_SETUP
#line 1442 "commentscan.l"
{ // argument
  					  current->relates = commentScanYYtext;
                                          //if (current->mGrpId!=DOX_NOGROUP) 
                                          //{
                                          //  memberGroupRelates = commentScanYYtext;
                                          //}
					  BEGIN( Comment );
					}
	YY_BREAK
case 98:
/* rule 98 can match eol */
YY_RULE_SETUP
#line 1450 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 99:
/* rule 99 can match eol */
YY_RULE_SETUP
#line 1454 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: Missing argument of \\relates or \\memberof command"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 1462 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle arguments of the relates(also)/addindex commands ----- */
case 101:
/* rule 101 can match eol */
YY_RULE_SETUP
#line 1468 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 102:
/* rule 102 can match eol */
YY_RULE_SETUP
#line 1473 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 1477 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the section/subsection/.. commands ------- */
case 104:
YY_RULE_SETUP
#line 1483 "commentscan.l"
{ // first argyment
  					  sectionLabel=commentScanYYtext;
                                          addOutput(commentScanYYtext);
					  sectionTitle.resize(0);
					  BEGIN(SectionTitle);
  					}
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 1489 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\section command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 1497 "commentscan.l"
{ // invalid character for section label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing section label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 107:
/* rule 107 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1504 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 108:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 8;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1509 "commentscan.l"
{ // end of section title
  					  addSection();
                                          addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 1514 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 1518 "commentscan.l"
{ // any character without special meaning
  					  sectionTitle+=commentScanYYtext;
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 1522 "commentscan.l"
{ // unescape escaped command
  					  sectionTitle+=&commentScanYYtext[1];
					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 1526 "commentscan.l"
{ // unescape escaped character
  					  sectionTitle+=commentScanYYtext[1];
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 1530 "commentscan.l"
{ // anything else
  					  sectionTitle+=commentScanYYtext;
					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle arguments of the subpage command ------- */
case 114:
YY_RULE_SETUP
#line 1537 "commentscan.l"
{ // first argument
                                          addOutput(commentScanYYtext);
					  // we add subpage labels as a kind of "inheritance" relation to prevent
					  // needing to add another list to the Entry class.
					  current->extends->append(new BaseInfo(commentScanYYtext,Public,Normal));
					  BEGIN(SubpageTitle);
  					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 1544 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\subpage command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 1552 "commentscan.l"
{ // no title, end command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 1556 "commentscan.l"
{ // add title, end of command
  					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 1560 "commentscan.l"
{ // no title, end of command
  					  unput(*commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
/* ----- handle arguments of the anchor command ------- */
case 119:
YY_RULE_SETUP
#line 1567 "commentscan.l"
{ // found argument
                                          SectionInfo  *si = new SectionInfo(yyFileName,commentScanYYtext,0,SectionInfo::Anchor);
                                          Doxygen::sectionDict.insert(commentScanYYtext,si);
  					  current->anchors->append(si);
					  addOutput(commentScanYYtext);
					  BEGIN( Comment );
  					}
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 1574 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\anchor command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 1582 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing anchor label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle arguments of the preformatted block commands ------- */
case 122:
/* rule 122 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1592 "commentscan.l"
{ // possible ends
  					  addOutput(commentScanYYtext);
					  if (&commentScanYYtext[4]==blockName) // found end of the block
					  {
  					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 1599 "commentscan.l"
{ // some word
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
#line 1602 "commentscan.l"
{ // new line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 1606 "commentscan.l"
{ // start of a C-comment
  					  g_commentCount++;
  					  addOutput(commentScanYYtext);
  					}
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 1610 "commentscan.l"
{ // end of a C-comment
  					  addOutput(commentScanYYtext);
  					  g_commentCount--;
					  if (g_commentCount<0 && blockName!="verbatim")
					  {
					    warn(yyFileName,yyLineNr,
					         "warning: found */ without matching /* while inside a \\%s block! Perhaps a missing \\end%s?\n",blockName.data(),blockName.data());
					  }
  					}
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 1619 "commentscan.l"
{
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case YY_STATE_EOF(FormatBlock):
#line 1622 "commentscan.l"
{
                                          warn(yyFileName,yyLineNr,
	                                    "warning: reached end of comment while inside a @%s block; check for missing @end%s tag!",
	                                    blockName.data(),blockName.data()
	                                  );				
					  yyterminate();
    					}
	YY_BREAK
/* ----- handle arguments of if/ifnot commands ------- */
case 128:
YY_RULE_SETUP
#line 1632 "commentscan.l"
{ // parameter of if/ifnot guard
                                          bool sectionEnabled = Config_getList("ENABLED_SECTIONS").find(commentScanYYtext)!=-1;
					  bool parentEnabled = TRUE;
					  if (!guards.isEmpty()) parentEnabled = guards.top()->isEnabled();
					  if (parentEnabled)
					  {
					    if (
						(sectionEnabled && guardType==Guard_If) ||  
						(!sectionEnabled && guardType==Guard_IfNot)
					       ) // section is visible
					    {
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					    else // section is invisible
					    {
					      if (guardType!=Guard_Skip)
					      {
					      	guards.push(new GuardedSection(FALSE,TRUE));
					      }
					      BEGIN( SkipGuardedSection );
					    }
					  }
					  else // invisible because of parent
					  {
					    guards.push(new GuardedSection(FALSE,FALSE));
					    BEGIN( SkipGuardedSection );
					  }
  					}
	YY_BREAK
case 129:
/* rule 129 can match eol */
YY_RULE_SETUP
#line 1662 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //next line is commented out due to bug620924
					  //addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 130:
/* rule 130 can match eol */
YY_RULE_SETUP
#line 1668 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 1672 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
case 132:
/* rule 132 can match eol */
YY_RULE_SETUP
#line 1675 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 1678 "commentscan.l"
{
  					  BEGIN(Comment);
  					}
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 1681 "commentscan.l"
{
  					  unput(*commentScanYYtext);
  					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle skipping of conditional sections ------- */
case 135:
/* rule 135 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1688 "commentscan.l"
{
                                          guardType = Guard_IfNot;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 136:
/* rule 136 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1692 "commentscan.l"
{
                                          guardType = Guard_If;
  					  BEGIN( GuardParam );
  					}
	YY_BREAK
case 137:
/* rule 137 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1696 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @endif without matching start command");
					  }
					  else
					  {
					    delete guards.pop();
					    BEGIN( GuardParamEnd );
					  }
  					}
	YY_BREAK
case 138:
/* rule 138 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1708 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @else without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      guards.push(new GuardedSection(TRUE,TRUE));
					      enabledSectionFound=TRUE;
					      BEGIN( GuardParamEnd );
					    }
					  }
  					}
	YY_BREAK
case 139:
/* rule 139 can match eol */
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1725 "commentscan.l"
{
  					  if (guards.isEmpty())
					  {
					    warn(yyFileName,yyLineNr,
						"warning: found @elseif without matching start command");
					  }
					  else
					  {
					    if (!enabledSectionFound && guards.top()->parentVisible())
					    {
					      delete guards.pop();
					      BEGIN( GuardParam );
					    }
					  }
  					}
	YY_BREAK
case 140:
/* rule 140 can match eol */
YY_RULE_SETUP
#line 1740 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  //addOutput('\n');
  					}
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 1744 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 1746 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle skipping of internal section ------- */
case 143:
/* rule 143 can match eol */
YY_RULE_SETUP
#line 1752 "commentscan.l"
{ // skip line
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
  					}
	YY_BREAK
case 144:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1756 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 145:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 6;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1759 "commentscan.l"
{
                                          g_condCount++;
  					}
	YY_BREAK
case 146:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1762 "commentscan.l"
{
                                          g_condCount--;
					  if (g_condCount<0) // handle conditional section around of \internal, see bug607743  
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 147:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1770 "commentscan.l"
{
  					  if (g_sectionLevel>0)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 148:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1777 "commentscan.l"
{
  					  if (g_sectionLevel>1)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 149:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1784 "commentscan.l"
{
  					  if (g_sectionLevel>2)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 150:
*yy_cp = (yy_hold_char); /* undo effects of setting up commentScanYYtext */
(yy_c_buf_p) = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up commentScanYYtext again */
YY_RULE_SETUP
#line 1791 "commentscan.l"
{
  					  if (g_sectionLevel>3)
					  {
					    unput('\\');
					    BEGIN(Comment);
					  }
  					}
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 1798 "commentscan.l"
{
					  BEGIN(Comment);
					}
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 1801 "commentscan.l"
{ // skip non-special characters
  					}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 1803 "commentscan.l"
{ // any other character
  					}
	YY_BREAK
/* ----- handle argument of name command ------- */
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 1809 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 155:
/* rule 155 can match eol */
YY_RULE_SETUP
#line 1814 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
					  g_memberGroupHeader+=' ';
  					}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 1819 "commentscan.l"
{ // ignore other stuff
					  g_memberGroupHeader+=*commentScanYYtext;
					  current->name+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of ingroup command ------- */
case 157:
YY_RULE_SETUP
#line 1826 "commentscan.l"
{ // group id
  					  current->groups->append(
					    new Grouping(commentScanYYtext, Grouping::GROUPING_INGROUP)
					  );
					  inGroupParamFound=TRUE;
  					}
	YY_BREAK
case 158:
/* rule 158 can match eol */
YY_RULE_SETUP
#line 1832 "commentscan.l"
{ // missing argument
  					  if (!inGroupParamFound)
					  {
  					    warn(yyFileName,yyLineNr,
					        "warning: Missing group name for \\ingroup command"
					        );
					  }
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 159:
/* rule 159 can match eol */
YY_RULE_SETUP
#line 1843 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  addOutput('\n');
  					}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 1847 "commentscan.l"
{ // ignore other stuff
  					  addOutput(*commentScanYYtext);
  					}
	YY_BREAK
/* ----- handle argument of fn command ------- */
case 161:
/* rule 161 can match eol */
YY_RULE_SETUP
#line 1853 "commentscan.l"
{ // end of argument
  					  if (braceCount==0)
					  {
					    if (*commentScanYYtext=='\n') yyLineNr++;
					    addOutput('\n');
					    langParser->parsePrototype(functionProto);
					    BEGIN( Comment );
					  }
  					}
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 1862 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 1866 "commentscan.l"
{ // non-special characters
                                          functionProto+=commentScanYYtext;
  					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 1869 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount++;
					}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 1873 "commentscan.l"
{
                                          functionProto+=commentScanYYtext;
					  braceCount--;
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 1877 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of overload command ------- */
case 167:
/* rule 167 can match eol */
YY_RULE_SETUP
#line 1885 "commentscan.l"
{ // end of argument
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  if (functionProto.stripWhiteSpace().isEmpty())
					  { // plain overload command
					    addOutput(getOverloadDocs());
					  }
					  else // overload declaration
					  {
                                            makeStructuralIndicator(Entry::OVERLOADDOC_SEC);
					    langParser->parsePrototype(functionProto);
					  }
					  BEGIN( Comment );
  					}
	YY_BREAK
case 168:
/* rule 168 can match eol */
YY_RULE_SETUP
#line 1899 "commentscan.l"
{ // line continuation
                                          yyLineNr++; 
					  functionProto+=' ';
  					}
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 1903 "commentscan.l"
{ // add other stuff
                                          functionProto+=*commentScanYYtext;
  					}
	YY_BREAK
/* ----- handle argument of inherit command ------- */
case 170:
YY_RULE_SETUP
#line 1909 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 1915 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\inherit command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 1923 "commentscan.l"
{ // invalid character for anchor label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing name for \\inherit command"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
/* ----- handle argument of extends and implements commands ------- */
case 173:
YY_RULE_SETUP
#line 1932 "commentscan.l"
{ // found argument
					  current->extends->append(
					    new BaseInfo(removeRedundantWhiteSpace(commentScanYYtext),Public,Normal)
					  );
					  BEGIN( Comment );
  					}
	YY_BREAK
case 174:
/* rule 174 can match eol */
YY_RULE_SETUP
#line 1938 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\extends or \\implements command has no argument"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 1946 "commentscan.l"
{ // ignore other stuff
  					}
	YY_BREAK
/* ----- handle language specific sections ------- */
case 176:
YY_RULE_SETUP
#line 1951 "commentscan.l"
{ /* language switch */
                                     QCString langId = &commentScanYYtext[2];
				     if (langId.isEmpty() ||
					 stricmp(Config_getEnum("OUTPUT_LANGUAGE"),langId)==0)
				     { // enable language specific section
				       BEGIN(Comment);
				     }
                                   }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 1959 "commentscan.l"
{ /* any character not a *, @, backslash or new line */
                                   }
	YY_BREAK
case 178:
/* rule 178 can match eol */
YY_RULE_SETUP
#line 1961 "commentscan.l"
{ /* new line in verbatim block */
  		                     if (*commentScanYYtext=='\n') yyLineNr++;
                                   }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 1964 "commentscan.l"
{ /* any other character */
                                   }
	YY_BREAK
/* ----- handle arguments of the cite command ------- */
case 180:
YY_RULE_SETUP
#line 1969 "commentscan.l"
{ // found argyment
  					  addCite();
                                          addOutput(commentScanYYtext);
					  BEGIN(Comment);
  					}
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 1974 "commentscan.l"
{ // missing argument
  					  warn(yyFileName,yyLineNr,
					      "warning: \\cite command has no label"
					      );
  					  if (*commentScanYYtext=='\n') yyLineNr++;
					  addOutput('\n');
					  BEGIN( Comment );
  					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 1982 "commentscan.l"
{ // invalid character for cite label
  					  warn(yyFileName,yyLineNr,
					      "warning: Invalid or missing cite label"
					      );
					  BEGIN(Comment);
  					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 1991 "commentscan.l"
ECHO;
	YY_BREAK
#line 5727 "<stdout>"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(Comment):
			case YY_STATE_EOF(PageDocArg1):
			case YY_STATE_EOF(PageDocArg2):
			case YY_STATE_EOF(RelatesParam1):
			case YY_STATE_EOF(ClassDocArg1):
			case YY_STATE_EOF(ClassDocArg2):
			case YY_STATE_EOF(ClassDocArg3):
			case YY_STATE_EOF(CategoryDocArg1):
			case YY_STATE_EOF(XRefItemParam1):
			case YY_STATE_EOF(XRefItemParam2):
			case YY_STATE_EOF(XRefItemParam3):
			case YY_STATE_EOF(FileDocArg1):
			case YY_STATE_EOF(EnumDocArg1):
			case YY_STATE_EOF(NameSpaceDocArg1):
			case YY_STATE_EOF(PackageDocArg1):
			case YY_STATE_EOF(GroupDocArg1):
			case YY_STATE_EOF(GroupDocArg2):
			case YY_STATE_EOF(SectionLabel):
			case YY_STATE_EOF(SectionTitle):
			case YY_STATE_EOF(SubpageLabel):
			case YY_STATE_EOF(SubpageTitle):
			case YY_STATE_EOF(LineParam):
			case YY_STATE_EOF(GuardParam):
			case YY_STATE_EOF(GuardParamEnd):
			case YY_STATE_EOF(SkipGuardedSection):
			case YY_STATE_EOF(SkipInternal):
			case YY_STATE_EOF(NameParam):
			case YY_STATE_EOF(InGroupParam):
			case YY_STATE_EOF(FnParam):
			case YY_STATE_EOF(OverloadParam):
			case YY_STATE_EOF(InheritParam):
			case YY_STATE_EOF(ExtendsParam):
			case YY_STATE_EOF(ReadFormulaShort):
			case YY_STATE_EOF(ReadFormulaLong):
			case YY_STATE_EOF(AnchorLabel):
			case YY_STATE_EOF(HtmlComment):
			case YY_STATE_EOF(SkipLang):
			case YY_STATE_EOF(CiteLabel):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed commentScanYYin at a new source and called
			 * commentScanYYlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = commentScanYYin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( commentScanYYwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * commentScanYYtext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of commentScanYYlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			commentScanYYrestart(commentScanYYin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) commentScanYYrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1068 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    
	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1068 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1067);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up commentScanYYtext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					commentScanYYrestart(commentScanYYin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( commentScanYYwrap( ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve commentScanYYtext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void commentScanYYrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        commentScanYYensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            commentScanYY_create_buffer(commentScanYYin,YY_BUF_SIZE );
	}

	commentScanYY_init_buffer(YY_CURRENT_BUFFER,input_file );
	commentScanYY_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void commentScanYY_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		commentScanYYpop_buffer_state();
	 *		commentScanYYpush_buffer_state(new_buffer);
     */
	commentScanYYensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	commentScanYY_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (commentScanYYwrap()) processing, but the only time this flag
	 * is looked at is after commentScanYYwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void commentScanYY_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	commentScanYYin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE commentScanYY_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) commentScanYYalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_create_buffer()" );

	b->yy_is_our_buffer = 1;

	commentScanYY_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with commentScanYY_create_buffer()
 * 
 */
    void commentScanYY_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		commentScanYYfree((void *) b->yy_ch_buf  );

	commentScanYYfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a commentScanYYrestart() or at EOF.
 */
    static void commentScanYY_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	commentScanYY_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then commentScanYY_init_buffer was _probably_
     * called from commentScanYYrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void commentScanYY_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		commentScanYY_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void commentScanYYpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	commentScanYYensure_buffer_stack();

	/* This block is copied from commentScanYY_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from commentScanYY_switch_to_buffer. */
	commentScanYY_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void commentScanYYpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	commentScanYY_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		commentScanYY_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void commentScanYYensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)commentScanYYrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in commentScanYYensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE commentScanYY_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) commentScanYYalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	commentScanYY_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to commentScanYYlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       commentScanYY_scan_bytes() instead.
 */
YY_BUFFER_STATE commentScanYY_scan_string (yyconst char * yystr )
{
    
	return commentScanYY_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to commentScanYYlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE commentScanYY_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) commentScanYYalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in commentScanYY_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = commentScanYY_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in commentScanYY_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up commentScanYYtext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		commentScanYYtext[commentScanYYleng] = (yy_hold_char); \
		(yy_c_buf_p) = commentScanYYtext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		commentScanYYleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int commentScanYYget_lineno  (void)
{
        
    return commentScanYYlineno;
}

/** Get the input stream.
 * 
 */
FILE *commentScanYYget_in  (void)
{
        return commentScanYYin;
}

/** Get the output stream.
 * 
 */
FILE *commentScanYYget_out  (void)
{
        return commentScanYYout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t commentScanYYget_leng  (void)
{
        return commentScanYYleng;
}

/** Get the current token.
 * 
 */

char *commentScanYYget_text  (void)
{
        return commentScanYYtext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void commentScanYYset_lineno (int  line_number )
{
    
    commentScanYYlineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see commentScanYY_switch_to_buffer
 */
void commentScanYYset_in (FILE *  in_str )
{
        commentScanYYin = in_str ;
}

void commentScanYYset_out (FILE *  out_str )
{
        commentScanYYout = out_str ;
}

int commentScanYYget_debug  (void)
{
        return commentScanYY_flex_debug;
}

void commentScanYYset_debug (int  bdebug )
{
        commentScanYY_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from commentScanYYlex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    commentScanYYin = stdin;
    commentScanYYout = stdout;
#else
    commentScanYYin = (FILE *) 0;
    commentScanYYout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * commentScanYYlex_init()
     */
    return 0;
}

/* commentScanYYlex_destroy is for both reentrant and non-reentrant scanners. */
int commentScanYYlex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		commentScanYY_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		commentScanYYpop_buffer_state();
	}

	/* Destroy the stack itself. */
	commentScanYYfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    commentScanYYfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * commentScanYYlex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *commentScanYYalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *commentScanYYrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void commentScanYYfree (void * ptr )
{
	free( (char *) ptr );	/* see commentScanYYrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 1991 "commentscan.l"



//----------------------------------------------------------------------------

static bool handleBrief(const QCString &)
{
  //printf("handleBrief\n");
  setOutput(OutputBrief);
  return FALSE;
}

static bool handleFn(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERDOC_SEC);
  functionProto.resize(0);
  braceCount=0;
  BEGIN(FnParam);
  return stop;
}

static bool handleDef(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DEFINEDOC_SEC);
  functionProto.resize(0);
  BEGIN(FnParam);
  return stop;
}

static bool handleOverload(const QCString &)
{
  functionProto.resize(0);
  BEGIN(OverloadParam);
  return FALSE;
}

static bool handleEnum(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::ENUMDOC_SEC);
  BEGIN(EnumDocArg1);
  return stop;
}

static bool handleDefGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_NORMAL;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleAddToGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_ADD;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleWeakGroup(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::GROUPDOC_SEC);
  current->groupDocType = Entry::GROUPDOC_WEAK;
  BEGIN( GroupDocArg1 );
  return stop;
}

static bool handleNamespace(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::NAMESPACEDOC_SEC);
  BEGIN( NameSpaceDocArg1 );
  return stop;
}

static bool handlePackage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PACKAGEDOC_SEC);
  BEGIN( PackageDocArg1 );
  return stop;
}

static bool handleClass(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::CLASSDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleHeaderFile(const QCString &)
{
  BEGIN( ClassDocArg2 );
  return FALSE;
}

static bool handleProtocol(const QCString &)
{ // Obj-C protocol
  bool stop=makeStructuralIndicator(Entry::PROTOCOLDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleCategory(const QCString &)
{ // Obj-C category
  bool stop=makeStructuralIndicator(Entry::CATEGORYDOC_SEC);
  BEGIN( CategoryDocArg1 ); 
  return stop;
}

static bool handleUnion(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::UNIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleStruct(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::STRUCTDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleInterface(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::INTERFACEDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handleIdlException(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXCEPTIONDOC_SEC);
  BEGIN( ClassDocArg1 ); 
  return stop;
}

static bool handlePage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::PAGEDOC_SEC);
  BEGIN( PageDocArg1 );
  return stop;
}

static bool handleMainpage(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MAINPAGEDOC_SEC);
  if (!stop) 
  {
    current->name = "mainpage";
  }
  BEGIN( PageDocArg2 );
  return stop;
}

static bool handleFile(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::FILEDOC_SEC);
  if (!stop) 
  {
    current->name = yyFileName;
  }
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDir(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::DIRDOC_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleExample(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::EXAMPLE_SEC);
  if (!stop) current->name = yyFileName;
  BEGIN( FileDocArg1 );
  return stop;
}

static bool handleDetails(const QCString &)
{
  if (inContext!=OutputBrief)
  {
    addOutput("\n\n"); // treat @details outside brief description
                       // as a new paragraph
  }
  setOutput(OutputDoc);
  return FALSE;
}

static bool handleName(const QCString &)
{
  bool stop=makeStructuralIndicator(Entry::MEMBERGRP_SEC);
  if (!stop)
  {
    g_memberGroupHeader.resize(0);
    BEGIN( NameParam );
    if (g_memberGroupId!=DOX_NOGROUP) // end of previous member group
    {
      closeGroup(current,yyFileName,yyLineNr,TRUE);
    }
  }
  return stop;
}

static bool handleTodo(const QCString &)
{
  newXRefKind = XRef_Todo;
  setOutput(OutputXRef);
  xrefKind = XRef_Todo;
  return FALSE;
}

static bool handleTest(const QCString &)
{
  newXRefKind = XRef_Test;
  setOutput(OutputXRef);
  xrefKind = XRef_Test;
  return FALSE;
}

static bool handleBug(const QCString &)
{
  newXRefKind = XRef_Bug;
  setOutput(OutputXRef);
  xrefKind = XRef_Bug;
  return FALSE;
}

static bool handleDeprecated(const QCString &)
{
  newXRefKind = XRef_Deprecated;
  setOutput(OutputXRef);
  xrefKind = XRef_Deprecated;
  return FALSE;
}

static bool handleXRefItem(const QCString &)
{
  BEGIN(XRefItemParam1);
  return FALSE;
}

static bool handleRelated(const QCString &)
{
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRelatedAlso(const QCString &)
{
  current->relatesType = Duplicate;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleMemberOf(const QCString &)
{
  current->relatesType = MemberOf;
  BEGIN(RelatesParam1);
  return FALSE;
}

static bool handleRefItem(const QCString &)
{
  addOutput(" @refitem ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleSection(const QCString &s)
{
  setOutput(OutputDoc);
  addOutput(" @"+s+" ");
  BEGIN(SectionLabel);
  if      (s=="section")       g_sectionLevel=1;
  else if (s=="subsection")    g_sectionLevel=2;
  else if (s=="subsubsection") g_sectionLevel=3;
  else if (s=="paragraph")     g_sectionLevel=4;
  return FALSE;
}

static bool handleSubpage(const QCString &s)
{
  if (current->section!=Entry::EMPTY_SEC && 
      current->section!=Entry::PAGEDOC_SEC &&
      current->section!=Entry::MAINPAGEDOC_SEC
     )
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\subpage command in a comment block that is not marked as a page!");
  }
  addOutput(" @"+s+" ");
  BEGIN(SubpageLabel);
  return FALSE;
}

static bool handleAnchor(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(AnchorLabel);
  return FALSE;
}

static bool handleCite(const QCString &s)
{
  addOutput(" @"+s+" ");
  BEGIN(CiteLabel);
  return FALSE;
}

static bool handleFormatBlock(const QCString &s)
{
  addOutput(" @"+s+" ");
  //printf("handleFormatBlock(%s)\n",s.data());
  blockName=s;
  g_commentCount=0;
  BEGIN(FormatBlock);
  return FALSE;
}

static bool handleAddIndex(const QCString &)
{
  addOutput(" @addindex ");
  BEGIN(LineParam);
  return FALSE;
}

static bool handleIf(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_If;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleIfNot(const QCString &)
{
  enabledSectionFound=FALSE;
  guardType = Guard_IfNot;
  BEGIN(GuardParam);
  return FALSE;
}

static bool handleElseIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    guardType = enabledSectionFound ? Guard_Skip : Guard_If;
    BEGIN(GuardParam);
  }
  return FALSE;
}

static bool handleElse(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\else without matching start command");
  }
  else
  {
    BEGIN( SkipGuardedSection );
  }
  return FALSE;
}

static bool handleEndIf(const QCString &)
{
  if (guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,
	"warning: found \\endif without matching start command");
  }
  else
  {
    delete guards.pop();
  }
  enabledSectionFound=FALSE;
  BEGIN( GuardParamEnd );
  return FALSE;
}

static bool handleIngroup(const QCString &)
{
  inGroupParamFound=FALSE;
  BEGIN( InGroupParam );
  return FALSE;
}

static bool handleNoSubGrouping(const QCString &)
{
  current->subGrouping = FALSE; 
  return FALSE;
}

static bool handleShowInitializer(const QCString &)
{
  current->initLines = 100000; // ON
  return FALSE;
}

static bool handleHideInitializer(const QCString &)
{
  current->initLines = 0; // OFF
  return FALSE;
}

static bool handleCallgraph(const QCString &)
{
  current->callGraph = TRUE; // ON
  return FALSE;
}

static bool handleCallergraph(const QCString &)
{
  current->callerGraph = TRUE; // ON
  return FALSE;
}

static bool handleInternal(const QCString &)
{
  if (!Config_getBool("INTERNAL_DOCS"))
  {
    // make sure some whitespace before a \internal command
    // is not treated as "documentation"
    if (current->doc.stripWhiteSpace().isEmpty())
    { 
      current->doc.resize(0);
    }
    g_condCount=0;
    BEGIN( SkipInternal );
  }
  else
  {
    // re-enabled for bug640828
    addOutput("\\internal "); 
  }
  return FALSE;
}

static bool handleLineBr(const QCString &)
{
  addOutput('\n');
  return FALSE;
}

static bool handleStatic(const QCString &)
{
  endBrief();
  current->stat = TRUE; 
  return FALSE;
}

static bool handlePure(const QCString &)
{
  endBrief();
  current->virt = Pure; 
  return FALSE;
}

static bool handlePrivate(const QCString &)
{
  current->protection = Private;
  return FALSE;
}

static bool handlePrivateSection(const QCString &)
{
  current->protection = protection = Private;
  return FALSE;
}

static bool handleProtected(const QCString &)
{
  current->protection = Protected;
  return FALSE;
}

static bool handleProtectedSection(const QCString &)
{
  current->protection = protection = Protected ;
  return FALSE;
}

static bool handlePublic(const QCString &)
{
  current->protection = Public;
  return FALSE;
}

static bool handlePublicSection(const QCString &)
{
  current->protection = protection = Public;
  return FALSE;
}

static bool handleInherit(const QCString &)
{
  BEGIN(InheritParam);
  return FALSE;
}

static bool handleExtends(const QCString &)
{
  BEGIN(ExtendsParam);
  return FALSE;
}

//----------------------------------------------------------------------------

static void checkFormula()
{
  if (YY_START==ReadFormulaShort || YY_START==ReadFormulaLong)
  {
    warn(yyFileName,yyLineNr,"warning: End of comment block while inside formula.");
  }
}

//----------------------------------------------------------------------------

bool parseCommentBlock(/* in */     ParserInterface *parser,
                       /* in */     Entry *curEntry,
                       /* in */     const QCString &comment,
		       /* in */     const QCString &fileName,
		       /* in,out */ int  &lineNr,
		       /* in */     bool isBrief,
		       /* in */     bool isAutoBriefOn,
		       /* in */     bool isInbody,
		       /* in,out */ Protection &prot,
		       /* in,out */ int &position,
		       /* out */    bool &newEntryNeeded
		      )
{
  //printf("parseCommentBlock() isBrief=%d isAutoBriefOn=%d lineNr=%d\n",
  //    isBrief,isAutoBriefOn,lineNr);

  initParser();
  guards.setAutoDelete(TRUE);
  guards.clear();
  langParser     = parser;
  current        = curEntry;
  if (comment.isEmpty()) return FALSE; // avoid empty strings
  inputString    = comment;
  inputString.append(" ");
  inputPosition  = position;
  yyLineNr       = lineNr;
  yyFileName     = fileName;
  protection     = prot;
  needNewEntry   = FALSE;
  xrefKind       = XRef_None;
  xrefAppendFlag = FALSE;
  insidePre      = FALSE;
  parseMore      = FALSE;
  inBody         = isInbody;
  outputXRef.resize(0);
  setOutput( isBrief || isAutoBriefOn ? OutputBrief : OutputDoc );
  briefEndsAtDot = isAutoBriefOn;
  g_condCount    = 0;
  g_sectionLevel = 0;

  if (!current->inbodyDocs.isEmpty() && isInbody) // separate in body fragments
  {
    current->inbodyDocs+="\n\n";
  }

  Debug::print(Debug::CommentScan,0,"-----------\nCommentScanner: %s:%d\n"
               "input=[%s]\n",fileName.data(),lineNr,comment.data()
              );
  
  commentScanYYrestart( commentScanYYin );
  BEGIN( Comment );
  commentScanYYlex();
  setOutput( OutputDoc );

  if (YY_START==OverloadParam) // comment ended with \overload
  {
    addOutput(getOverloadDocs());
  }

  if (!guards.isEmpty())
  {
    warn(yyFileName,yyLineNr,"Documentation block ended in the middle of a conditional section!");
  }

  current->doc=stripLeadingAndTrailingEmptyLines(current->doc);

  if (current->section==Entry::FILEDOC_SEC && current->doc.isEmpty())
  {
    // to allow a comment block with just a @file command.
    current->doc="\n\n";
  }

  if (current->section==Entry::MEMBERGRP_SEC &&
      g_memberGroupId==DOX_NOGROUP) // @name section but no group started yet
  {
    openGroup(current,yyFileName,yyLineNr);
  }

  Debug::print(Debug::CommentScan,0,
               "brief=[%s]\ndocs=[%s]\ninbody=[%s]\n===========\n",
	       current->brief.data(),current->doc.data(),current->inbodyDocs.data()
              );
  
  checkFormula();
  prot = protection;
  
  groupAddDocs(curEntry,fileName);

  newEntryNeeded = needNewEntry;

  // if we did not proceed during this call, it does not make
  // sense to continue, since we get stuck. See bug 567346 for situations
  // were this happens
  if (parseMore && position==inputPosition) parseMore=FALSE;

  if (parseMore) position=inputPosition; else position=0;

  lineNr = yyLineNr;
  //printf("position=%d parseMore=%d\n",position,parseMore);


  return parseMore;
}

//---------------------------------------------------------------------------

void groupEnterFile(const char *fileName,int)
{
  g_autoGroupStack.setAutoDelete(TRUE);
  g_autoGroupStack.clear();
  g_memberGroupId = DOX_NOGROUP;
  g_memberGroupDocs.resize(0);
  g_memberGroupRelates.resize(0);
  g_compoundName=fileName;
}

void groupLeaveFile(const char *fileName,int line)
{
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of file while inside a member group\n");
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  if (!g_autoGroupStack.isEmpty())
  {
    warn(fileName,line,"warning: end of file while inside a group\n");
  }
}

void groupEnterCompound(const char *fileName,int line,const char *name)
{
  if (g_memberGroupId!=DOX_NOGROUP)
  {
    warn(fileName,line,"warning: try to put compound %s inside a member group\n",name);
  }
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName = name;
  int i = g_compoundName.find('(');
  if (i!=-1) 
  {
    g_compoundName=g_compoundName.left(i); // strip category (Obj-C)
  }
  if (g_compoundName.isEmpty())
  {
    g_compoundName=fileName;
  }
  //printf("groupEnterCompound(%s)\n",name);
}

void groupLeaveCompound(const char *,int,const char * /*name*/)
{
  //printf("groupLeaveCompound(%s)\n",name);
  //if (g_memberGroupId!=DOX_NOGROUP)
  //{
  //  warn(fileName,line,"warning: end of compound %s while inside a member group\n",name);
  //}
  g_memberGroupId=DOX_NOGROUP;
  g_memberGroupRelates.resize(0);
  g_memberGroupDocs.resize(0);
  g_compoundName.resize(0);
}

static int findExistingGroup(int &groupId,const MemberGroupInfo *info)
{
  //printf("findExistingGroup %s:%s\n",info->header.data(),info->compoundName.data());
  QIntDictIterator<MemberGroupInfo> di(Doxygen::memGrpInfoDict);
  MemberGroupInfo *mi;
  for (di.toFirst();(mi=di.current());++di)
  {
    if (g_compoundName==mi->compoundName &&  // same file or scope
	!mi->header.isEmpty() &&             // not a nameless group
	stricmp(mi->header,info->header)==0  // same header name
       )
    {
      //printf("Found it!\n");
      return di.currentKey(); // put the item in this group
    }
  }
  groupId++; // start new group
  return groupId;
}

void openGroup(Entry *e,const char *,int)
{
  //printf("==> openGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //  	e->name.data(),e->section,g_autoGroupStack.count());
  if (e->section==Entry::GROUPDOC_SEC) // auto group
  {
    g_autoGroupStack.push(new Grouping(e->name,e->groupingPri()));
  }
  else // start of a member group
  {
    //printf("    membergroup id=%d %s\n",g_memberGroupId,g_memberGroupHeader.data());
    if (g_memberGroupId==DOX_NOGROUP) // no group started yet
    {
      static int curGroupId=0;

      MemberGroupInfo *info = new MemberGroupInfo;
      info->header = g_memberGroupHeader.stripWhiteSpace();
      info->compoundName = g_compoundName;
      g_memberGroupId = findExistingGroup(curGroupId,info);
      //printf("    use membergroup %d\n",g_memberGroupId);
      Doxygen::memGrpInfoDict.insert(g_memberGroupId,info);

      g_memberGroupRelates = e->relates;
      e->mGrpId = g_memberGroupId;
    }
  }
}

void closeGroup(Entry *e,const char *fileName,int,bool foundInline)
{
  //printf("==> closeGroup(name=%s,sec=%x) g_autoGroupStack=%d\n",
  //    e->name.data(),e->section,g_autoGroupStack.count());
  if (g_memberGroupId!=DOX_NOGROUP) // end of member group
  {
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) // known group
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
    }
    g_memberGroupId=DOX_NOGROUP;
    g_memberGroupRelates.resize(0);
    g_memberGroupDocs.resize(0);
    e->mGrpId=DOX_NOGROUP;
    //printf("new group id=%d\n",g_memberGroupId);
  }
  else if (!g_autoGroupStack.isEmpty()) // end of auto group
  {
    Grouping *grp = g_autoGroupStack.pop();
    // see bug577005: we should not remove the last group for e
    if (!foundInline) e->groups->removeLast();
    //printf("Removing %s e=%p\n",grp->groupname.data(),e);
    delete grp;
    if (!foundInline) initGroupInfo(e);
  }
}

void initGroupInfo(Entry *e)
{
  //printf("==> initGroup(id=%d,related=%s,e=%p)\n",g_memberGroupId,
  //       g_memberGroupRelates.data(),e);
  e->mGrpId     = g_memberGroupId;
  e->relates    = g_memberGroupRelates;
  if (!g_autoGroupStack.isEmpty())
  {
    //printf("Appending group %s to %s: count=%d entry=%p\n",
    //	g_autoGroupStack.top()->groupname.data(),
    //	e->name.data(),e->groups->count(),e);
    e->groups->append(new Grouping(*g_autoGroupStack.top()));
  }
}

static void groupAddDocs(Entry *e,const char *fileName)
{
  if (e->section==Entry::MEMBERGRP_SEC)
  {
    g_memberGroupDocs=e->brief.stripWhiteSpace();
    e->doc = stripLeadingAndTrailingEmptyLines(e->doc);
    if (!g_memberGroupDocs.isEmpty() && !e->doc.isEmpty())
    {
      g_memberGroupDocs+="\n\n";
    }
    g_memberGroupDocs+=e->doc;
    MemberGroupInfo *info=Doxygen::memGrpInfoDict.find(g_memberGroupId);
    if (info) 
    {
      info->doc = g_memberGroupDocs;
      info->docFile = fileName;
      info->setRefItems(e->sli);
    }
    e->doc.resize(0);
    e->brief.resize(0);
  }
}


#if !defined(YY_FLEX_SUBMINOR_VERSION) 
//----------------------------------------------------------------------------
extern "C" { // some bogus code to keep the compiler happy
  void commentScanYYdummy() { yy_flex_realloc(0,0); } 
}
#endif


